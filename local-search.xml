<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>解决树莓派硬盘挂载失败问题</title>
    <link href="/2023/09/09/%E8%A7%A3%E5%86%B3%E6%A0%91%E8%8E%93%E6%B4%BE%E7%A1%AC%E7%9B%98%E6%8C%82%E8%BD%BD%E5%A4%B1%E8%B4%A5%E9%97%AE%E9%A2%98/"/>
    <url>/2023/09/09/%E8%A7%A3%E5%86%B3%E6%A0%91%E8%8E%93%E6%B4%BE%E7%A1%AC%E7%9B%98%E6%8C%82%E8%BD%BD%E5%A4%B1%E8%B4%A5%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>自从给树莓派装上openwrt以后，我观察到它的温度一直在70多度徘徊不定，最高飙到过80度。于是咬咬牙在淘宝下单了一个新的带风扇的壳，9块8包邮。</p><p>拿到货当晚兴冲冲给它换上，重新开机，温度稳定在了50度上下。</p><p>但是新的问题出现了，重启后我的移动硬盘挂载不上去了，一直在报未知错误，我尝试用mount命令手动挂载，却出现：</p><p><strong>ntfs-3g-mount: mount failed: 设备或资源忙</strong></p><p><img src="/2023/09/09/%E8%A7%A3%E5%86%B3%E6%A0%91%E8%8E%93%E6%B4%BE%E7%A1%AC%E7%9B%98%E6%8C%82%E8%BD%BD%E5%A4%B1%E8%B4%A5%E9%97%AE%E9%A2%98/0.webp" alt="高高兴兴换壳中"></p><h2 id="排查"><a href="#排查" class="headerlink" title="排查"></a>排查</h2><p>一开始怀疑是硬盘有损坏，插到台式电脑上进行检测、修复、测试，发现读写功能一切正常。</p><p>然后怀疑是进程占用，但是却查不到任何占用磁盘的进程号。</p><p>接着怀疑是电压不足的原因，因为新插了一个风扇在板子上，于是拆下来重启，依然挂载失败。</p><p>怀疑ntfs挂载有问题……</p><p>……</p><p>最后怀疑是usb接口坏了，弄了个u盘插到b口上，果然也挂载不上去。</p><p>去<code>/var/log</code>下面翻看了以下系统日志，发现有一行打印 usb device is blocked.</p><p>那什么东西会去block usb口呢？我把目光瞄向了上一次新增的，一个自启的容器：openwrt。</p><p>使用docker rmi 和 docker rm命令清理掉openwrt 的镜像和容器后，树莓派自动重启了，随之硬盘也能正常挂载了。</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>回想了一下，整个事情是这么个回事：</p><p>树莓派启动 –&gt; docker启动 –&gt; openwrt容器拉起 –&gt; 磁盘挂载</p><p>因为磁盘挂载速度慢于容器启动速度，且openwrt会锁usb口设备，所以会有上面这么蛋疼的一幕。</p><p>虽然还不清楚根因，但解决思路已经很清晰了：让openwrt容器在磁盘挂载后再启动。</p><p>这边先按照上一篇博文《树莓派自制UU加速盒》中重新搞了一下openwrt容器，但有几点不一样的：</p><ol><li><p>启动时去掉命令里的<code>--restart always</code></p></li><li><p>进容器配置好网络和UU插件，并把家里设备都加速好</p></li><li><p>退出容器并把当前这个配置好的容器创建成我们自己的镜像：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo docker commit openwrt myopenwrt<br></code></pre></td></tr></table></figure></li><li><p>移除当前容器，并使用我们自己的镜像运行，这次带上自启参数：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo docker rm openwrt --force<br>sudo docker run --restart always --name myopenwrt -d --network macnet --privileged myopenwrt:latest<br></code></pre></td></tr></table></figure></li></ol><p>这样容器重启，也不需要我们重新配置了，它会自动去拉我们已经配置好的镜像。</p><p>接下来就是让docker开机的时候延迟启动：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo vim /usr/lib/systemd/system/docker.service<br></code></pre></td></tr></table></figure><p>在<code>[Service]</code>下面添加一行配置：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">ExecStartPre</span>=<span class="hljs-string">sleep 30s</span><br></code></pre></td></tr></table></figure><p>重启树莓派进行测试，磁盘挂载、openwrt运行一切正常。</p><p><img src="/2023/09/09/%E8%A7%A3%E5%86%B3%E6%A0%91%E8%8E%93%E6%B4%BE%E7%A1%AC%E7%9B%98%E6%8C%82%E8%BD%BD%E5%A4%B1%E8%B4%A5%E9%97%AE%E9%A2%98/1.webp" alt="运行正常"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>树莓派自制UU加速盒</title>
    <link href="/2023/08/27/%E6%A0%91%E8%8E%93%E6%B4%BE%E8%87%AA%E5%88%B6UU%E5%8A%A0%E9%80%9F%E7%9B%92/"/>
    <url>/2023/08/27/%E6%A0%91%E8%8E%93%E6%B4%BE%E8%87%AA%E5%88%B6UU%E5%8A%A0%E9%80%9F%E7%9B%92/</url>
    
    <content type="html"><![CDATA[<p>作为一个主机玩家，当需要进行网络联机游戏的时候，绕不开游戏加速这个事情。</p><p>一是因为主机游戏的服务器大多部署在国外，二是因为现在家用宽带几乎分不到公网IP了，网络出口不知道要穿几层NAT。</p><p>我平时在xbox上打apex，switch上打喷射战士、怪物猎人，基本都需要先打开电脑启动UU加速器，再到主机上进行网络配置，十分麻烦。</p><p>所以早就想要一个类似于UU加速盒的设备了，然而我家的路由器不支持相关插件的安装，又不想花钱再买一个盒子或路由器，最后还得是万能的树莓派出马。</p><p>基本的实现方案是在树莓派上跑openwrt的容器，在openwrt上安装UU加速插件（官方支持）。</p><p>其实很早之前我就尝试过，但当时装的raspberrypi 32位，docker有点问题，最后拉下来openwrt的arm镜像，运行起来容器内外网络不通，不了了之。</p><p>前阵子为了做家庭影院，给树莓派烧录了最新的64位系统，除了装kodi的时候遇到了一点错误，其他地方都看起来还不错。</p><p>既然已经24h在跑下载任务和文件共享服务了，那干脆把树莓派榨干，做成一个旁路由，来实现游戏加速的功能。</p><h2 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt-get install docker.io<br></code></pre></td></tr></table></figure><h2 id="树莓派网络配置"><a href="#树莓派网络配置" class="headerlink" title="树莓派网络配置"></a>树莓派网络配置</h2><p>打开网卡混杂模式，让所有流量都能进树莓派：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo ip link set eth0 promisc on<br></code></pre></td></tr></table></figure><p>创建macvlan网络，让进树莓派的流量能直接访问容器，其中<code>subnet</code>和<code>gateway</code>都是我路由器（主路由）的ip：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo docker network create -d macvlan --subnet=192.168.31.1/24 --gateway=192.168.31.1 -o parent=eth0 macnet<br></code></pre></td></tr></table></figure><h2 id="下载运行openwrt镜像"><a href="#下载运行openwrt镜像" class="headerlink" title="下载运行openwrt镜像"></a>下载运行openwrt镜像</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo docker run --restart always --name openwrt -d --network macnet --privileged unifreq/openwrt-aarch64:latest<br></code></pre></td></tr></table></figure><p>docker会自动下载并运行指定的镜像， 结束以后可以用<code>sudo docker ps</code>检查是否有容器正常运行。</p><h2 id="容器内网络配置"><a href="#容器内网络配置" class="headerlink" title="容器内网络配置"></a>容器内网络配置</h2><p>进入openwrt容器内部：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo docker exec -it openwrt bash<br></code></pre></td></tr></table></figure><p>编辑网络配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vi /etc/config/network<br></code></pre></td></tr></table></figure><p>找到 <code>config interface &#39;lan&#39;</code>所在的配置区域，对<code>option ipaddr</code>进行重新配置，最好打开路由器的后台管理界面进行查看，配置一个同网段但是没有被使用过的ip（我这里配置的192.168.31.200）； 最后在后面追加两行网关、DNS的配置，均使用路由器ip：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">option gateway &#x27;192.168.31.1&#x27;<br>option dns &#x27;192.168.31.1&#x27;<br></code></pre></td></tr></table></figure><p>最终配置效果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">config interface &#x27;lan&#x27;<br>        option type &#x27;bridge&#x27;<br>        option ifname &#x27;eth0&#x27;<br>        option proto &#x27;static&#x27;<br>        option ipaddr &#x27;192.168.31.200&#x27;<br>        option netmask &#x27;255.255.255.0&#x27;<br>        option ip6assign &#x27;60&#x27;<br>        option gateway &#x27;192.168.31.1&#x27;<br>        option dns &#x27;192.168.31.1<br></code></pre></td></tr></table></figure><p>重启网络：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">/etc/init.d/network restart<br></code></pre></td></tr></table></figure><p>至此openwrt配置完成，可以在浏览器中对刚设置的<code>ipaddr</code>中的ip进行访问了，会跳转到openwrt页面。</p><h2 id="UU插件安装"><a href="#UU插件安装" class="headerlink" title="UU插件安装"></a>UU插件安装</h2><p>以下是UU官网上的安装命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget http://uu.gdl.netease.com/uuplugin-script/202012111056/install.sh -O install.sh<br>/bin/sh install.sh openwrt $(uname -m)<br></code></pre></td></tr></table></figure><p>生成一个sni号，结束。</p><p><strong>如果后续发现UU扫描不上主机、或者是干脆报设备不支持加速插件，都可以把上面第二句执行一遍，重新安装，解决一切问题。</strong></p><h2 id="使用加速"><a href="#使用加速" class="headerlink" title="使用加速"></a>使用加速</h2><p>现在我们的设备连接路由器的网络，是由路由器自动分配的网络配置，如果想让设备连上旁路由，则需要在设备上手动配置网络。</p><p>首先是手机，先下载一个UU主机加速器的app作为加速控制界面。再打开wifi设置，选择路由器的wifi，打开ip手动配置（有的设备叫“静态配置”）进行如下配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> IP地址： 192.168.31.6 （任一个路由器分配网段内，且没有被使用的ip）</span><br><span class="hljs-meta">#</span><span class="bash"> 子网掩码： 255.255.255.0 （与路由器中IP分配的规则一致）</span><br><span class="hljs-meta">#</span><span class="bash"> 网关：192.168.31.200 （填写openwrt配置的ip，有的设备这里叫路由器）</span><br><span class="hljs-meta">#</span><span class="bash"> DNS：192.168.31.200 （填写openwrt配置的ip）</span><br></code></pre></td></tr></table></figure><p>其实主要就是把网关和DNS都配置成旁路由（openwrt）的ip即可，这样该设备的网络流量都会走旁路由过。</p><p>然后是游戏主机，也需要做类似手机的网络配置。</p><p>配置完成后，相当于手机和游戏主机都连上了旁路由，也就是树莓派。</p><p>在手机上打开UU：”硬件加速” -&gt; “安装路由器插件”，等待一段时间后，UU会自动识别路由器为openwrt，并开启插件扫描连接到旁路由上的主机，之后选择主机进行加速即可。</p><p>后续再使用手机对主机进行加速，不再需要连到旁路由，只有第一次安装绑定路由器插件时需要。</p><p>树莓派一般是24h运行，不关机也不怎么耗电，以后主机游戏也是打开即可玩。</p><p><img src="/2023/08/27/%E6%A0%91%E8%8E%93%E6%B4%BE%E8%87%AA%E5%88%B6UU%E5%8A%A0%E9%80%9F%E7%9B%92/0.png" alt="加速成功"></p><h2 id="喷喷暴杀"><a href="#喷喷暴杀" class="headerlink" title="喷喷暴杀"></a>喷喷暴杀</h2><p>加速效果相当好！！！妈妈再也不用担心对战有延迟了。</p><p><img src="/1.webp" alt="暴打小朋友"></p>]]></content>
    
    
    <categories>
      
      <category>服务器</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>树莓派</tag>
      
      <tag>docker</tag>
      
      <tag>openwrt</tag>
      
      <tag>旁路由</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>低成本家庭nas搭建</title>
    <link href="/2023/08/19/%E4%BD%8E%E6%88%90%E6%9C%AC%E5%AE%B6%E5%BA%ADnas%E6%90%AD%E5%BB%BA/"/>
    <url>/2023/08/19/%E4%BD%8E%E6%88%90%E6%9C%AC%E5%AE%B6%E5%BA%ADnas%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<p>最近在研究流媒体服务器，想实现无论是在客厅还是卧室、无论是躺着还是坐着都可以快乐追番，首先微软自带的windows media player很好用，基本上电视都支持dlna，同一局域网就可以远程播放多媒体文件，而平板、手机上都是有相关app支持dlna的，我个人实验下来还不错的移动端app如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">iOS: infuse<br><span class="hljs-attr">Android</span>: BubbleUPnP + MXplayer<br></code></pre></td></tr></table></figure><p>再者大多播放器也支持smb协议，可以用电脑来共享文件。也就是说，只要有一台24h运行、设置好相关服务的电脑，就可以满足我的需求。</p><p>但全天开着电脑，很不环保，完全可以用树莓派来替代。（今天实战了一下，播放1080P视频非常流畅，包括拖动进度条、切换视频等）</p><p>有网友很好奇，怎么弄？成本是多少？那我就把搭建材料、过程都分享出来。</p><p><img src="/2023/08/19/%E4%BD%8E%E6%88%90%E6%9C%AC%E5%AE%B6%E5%BA%ADnas%E6%90%AD%E5%BB%BA/0.png" alt="最终成品"></p><h2 id="材料"><a href="#材料" class="headerlink" title="材料"></a>材料</h2><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs excel"><span class="hljs-number">1</span><span class="hljs-built_in">T</span>移动硬盘：￥<span class="hljs-number">399</span> （京东西数自营店价格。可以买一块<span class="hljs-number">2</span><span class="hljs-built_in">T</span>的机械硬盘+硬盘盒，价格和这差不多）<br>树莓派<span class="hljs-number">4</span>b： ￥<span class="hljs-number">579</span> （淘宝某店<span class="hljs-number">4</span>G主板基础套餐价格，带TF卡、读卡器、micro-HDMI线等配件）<br><br>P.S.后面了解到一些入门的nas好像也就不到一千块，如果你不想折腾其实完全可以直接买一个真正的nas。<br></code></pre></td></tr></table></figure><p>以上两个东西是我很早之前就买了，一直在吃灰，今天才拿出来<del>废物利用</del>使用。价格也是现查的，之前买的时候貌似比这还便宜吧。。。</p><p>所以只要有一个硬盘（支持usb3.0），有一块树莓派4b的板子（我的是4G内存，你也可以用性能更好的8G），就可以开始制作了。</p><p>其他需要的一些东东：</p><ul><li><p>一台电脑（我只有windows，后面都用windows举例）</p></li><li><p>一个路由器（电脑、树莓派都接入该路由器的wifi）</p></li><li><p>TF卡，不用太大，16G就可以了，拿来做树莓派系统绰绰有余</p></li><li><p>读卡器</p></li><li><p>键盘、鼠标、micro-HDMI线 、显示器（接树莓派，做输入输出）</p></li></ul><h2 id="装系统"><a href="#装系统" class="headerlink" title="装系统"></a>装系统</h2><p>树莓派官网下载地址： <a href="https://www.raspberrypi.com/software/">Raspberry Pi Imager</a></p><p>选择自己电脑对应的系统版本下载就好了，我这里下载的是windows版的Raspberry Pi Imager。</p><p>拿出TF卡，使用读卡器插到电脑上，如下图，依次选择树莓派64位系统（注意，不要选Lite，Lite不带图形界面），TF卡，点击“烧录”按钮。</p><p><img src="/2023/08/19/%E4%BD%8E%E6%88%90%E6%9C%AC%E5%AE%B6%E5%BA%ADnas%E6%90%AD%E5%BB%BA/1.png" alt="树莓派镜像烧录器"></p><p>烧录完成后，拔出读卡器，将TF卡插到树莓派主板上，通电等待启动即可。</p><p>因为烧录的图形化界面的系统，这里最好给树莓派接上显示器、鼠标、键盘，根据显示，依次设置用户名、密码、wifi等。</p><p>网上关于树莓派怎么安装，有很多教程，有不清楚的可以直接问搜索引擎。</p><h2 id="远程"><a href="#远程" class="headerlink" title="远程"></a>远程</h2><p>能正常进入系统后，可以按照如下所示将vnc、ssh服务都打开</p><p><img src="/2023/08/19/%E4%BD%8E%E6%88%90%E6%9C%AC%E5%AE%B6%E5%BA%ADnas%E6%90%AD%E5%BB%BA/2.png" alt="设置"></p><p><img src="/2023/08/19/%E4%BD%8E%E6%88%90%E6%9C%AC%E5%AE%B6%E5%BA%ADnas%E6%90%AD%E5%BB%BA/3.png" alt="打开服务"></p><p>vnc 支持远程图形界面访问</p><p>ssh 支持远程命令行访问</p><p>这意味着，之后将无需显示器、鼠标、键盘这些设备，也能通过其他电脑对树莓派进行控制。</p><p>当然前提是路由器分配给树莓派的内网ip要可知（最好固定下来），可通过命令行输入<code>ip a</code> 进行查询。</p><p><img src="/2023/08/19/%E4%BD%8E%E6%88%90%E6%9C%AC%E5%AE%B6%E5%BA%ADnas%E6%90%AD%E5%BB%BA/4.png" alt="IP"></p><p>网上关于vnc、ssh的教程有很多，这里不展开说了。</p><h2 id="安装samba"><a href="#安装samba" class="headerlink" title="安装samba"></a>安装samba</h2><p>smb是一个比较通用的资源共享协议，windows天然支持，树莓派则需要安装samba：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 更新apt</span><br>sudo apt-get update<br><span class="hljs-meta">#</span><span class="bash"> 安装vim</span><br>sudo apt-get install vim <br><span class="hljs-meta">#</span><span class="bash"> 安装samba</span><br>sudo apt-get install samba <br></code></pre></td></tr></table></figure><p>此时可以接入硬盘，树莓派会自动挂载在<code>/media/pi</code>下面，我这里路径为<code>/media/pi/Elements</code></p><p><img src="/2023/08/19/%E4%BD%8E%E6%88%90%E6%9C%AC%E5%AE%B6%E5%BA%ADnas%E6%90%AD%E5%BB%BA/5.png" alt="挂载"></p><p>对samba进行配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo vim /etc/samba/smb.conf<br></code></pre></td></tr></table></figure><p>在文件的末尾追加如下内容，将整个media目录进行共享：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">[myshare]</span><br><span class="hljs-attr">path</span> = <span class="hljs-string">/media</span><br><span class="hljs-attr">writeable</span>=<span class="hljs-string">Yes</span><br><span class="hljs-attr">create</span> <span class="hljs-string">mask=0777</span><br><span class="hljs-attr">directory</span> <span class="hljs-string">mask=0777</span><br><span class="hljs-attr">public</span>=<span class="hljs-string">yes</span><br><span class="hljs-attr">browseable</span>=<span class="hljs-string">yes</span><br></code></pre></td></tr></table></figure><p>设置smb用户密码：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo smbpasswd -a pi<br><span class="hljs-meta">#</span><span class="bash"> pi为用户名，之后按照提示，依次设定密码</span><br></code></pre></td></tr></table></figure><p>重启服务：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo systemctl restart smbd<br></code></pre></td></tr></table></figure><p>重启完成后，便可远程访问硬盘上的资源。</p><p>以windows举例，只需在“映射网络驱动器”中输入<code>\\$&#123;树莓派ip&#125;\myshare</code>，然后使用上面设置的smb用户密码登入即可：</p><p><img src="/2023/08/19/%E4%BD%8E%E6%88%90%E6%9C%AC%E5%AE%B6%E5%BA%ADnas%E6%90%AD%E5%BB%BA/6.png" alt="windows远程访问硬盘"></p><h2 id="安装minidlna"><a href="#安装minidlna" class="headerlink" title="安装minidlna"></a>安装minidlna</h2><p>我家电视是不支持smb的（可能支持，只是我不会用），为了能直接播放硬盘上的视频，还需要给树莓派安装minidlna：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt-get install minidlna<br></code></pre></td></tr></table></figure><p>在移动硬盘上建立视频文件夹，该文件夹后续用来存放视频：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir -p /media/pi/Elements/nas/video<br></code></pre></td></tr></table></figure><p>修改minidlna配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo vim /etc/minidlna.conf<br></code></pre></td></tr></table></figure><p>主要是<code>media_dir</code>这一行, 将视频目录指向刚创建的文件夹：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">media_dir</span>=<span class="hljs-string">V,/media/pi/Elements/nas/video</span><br></code></pre></td></tr></table></figure><p>重启minidlna服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo service minidlna start<br></code></pre></td></tr></table></figure><p>可以往<code>/media/pi/Elements/nas/video</code>目录拷一个mp4文件上去，用电视测试一下，一般是可以正常播放了的。</p><h2 id="安装下载器"><a href="#安装下载器" class="headerlink" title="安装下载器"></a>安装下载器</h2><p>对于下载器，我没怎么研究，目前只用过windows上的<code>qbittorrent</code>，感觉还不错，给树莓派也装了一个：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt-get install qbittorrent<br></code></pre></td></tr></table></figure><p>长这样（文件丢失是因为我暴力移动了下载文件的位置）：</p><p><img src="/2023/08/19/%E4%BD%8E%E6%88%90%E6%9C%AC%E5%AE%B6%E5%BA%ADnas%E6%90%AD%E5%BB%BA/7.png" alt="qbittorrent"></p><p>后续打算利用树莓派进行BT下载，下载目录为<code>/media/pi/Elements/nas/video/new/</code>。</p><p>也许有其他命令行的下载器，比qbittorrent更好用，后面再研究研究。</p><p>至此，就算折腾完毕了。</p><p><img src="/2023/08/19/%E4%BD%8E%E6%88%90%E6%9C%AC%E5%AE%B6%E5%BA%ADnas%E6%90%AD%E5%BB%BA/12.png" alt="弄完了，接上电源，丢在电视柜就可以不管了"></p><h2 id="个人定制"><a href="#个人定制" class="headerlink" title="个人定制"></a>个人定制</h2><p>因为我找新番的论坛，最外层页面只有磁力链接的特征码，我设想的使用方式是：</p><ol><li>用PC上论坛收集特征码，将特征码写到共享盘上某个文本文件上</li><li>远程VNC树莓派，运行脚本，自动拼接磁力链接，并拷贝到剪切板</li><li>打开qbittorrent，新建（会自动读取剪切板的内容），开始下载</li><li>下载完后，根据某定义的规则，将视频分目录进行归档存放</li></ol><p>于是我规划了一下文件目录：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 创建下载辅助目录</span><br>mkdir -p /media/pi/Elements/nas/qbit<br><br>cd /media/pi/Elements/nas/qbit<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 创建特征码收集文件</span><br>touch hash.txt<br><span class="hljs-meta">#</span><span class="bash"> 创建视频分类规则文件</span><br>touch dir.json<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 创建脚本文件夹，内存放有文件qbit_tool.py</span><br>mkdir -p /tools<br>touch /tools/qbit_tool.py<br>vim /tools/qbit_tool.py # 将后面的脚本内容拷贝进该文件即可<br></code></pre></td></tr></table></figure><p>特征码文件长这样：</p><p><img src="/2023/08/19/%E4%BD%8E%E6%88%90%E6%9C%AC%E5%AE%B6%E5%BA%ADnas%E6%90%AD%E5%BB%BA/8.png" alt="hash.txt"></p><p>分类规则文件是个json文件，由n对k-v组成，key是视频分类的目录，value是一组可能出现在视频文件名中的字符串（有的字幕组会用罗马拼音，有的字幕组直接使用汉字），这个文件具体内容需要自己进行维护，如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>    <span class="hljs-attr">&quot;不死少女杀人笑剧&quot;</span>: [<br>        <span class="hljs-string">&quot;Undead Girl Murder Farce&quot;</span><br>    ],<br><br>    <span class="hljs-attr">&quot;无职转生S2&quot;</span>: [<br>        <span class="hljs-string">&quot;Mushoku Tensei II&quot;</span><br>    ],<br><br>    <span class="hljs-attr">&quot;夫妻交欢&quot;</span>: [<br>        <span class="hljs-string">&quot;Fuufu Koukan&quot;</span><br>    ]<br>&#125;<br></code></pre></td></tr></table></figure><p>python脚本内容如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> shutil<br><span class="hljs-keyword">import</span> sys<br><br><span class="hljs-keyword">import</span> pandas.io.clipboard <span class="hljs-keyword">as</span> cb<br><br><br>MAGNET_PREFIX = <span class="hljs-string">&quot;magnet:?xt=urn:btih:&quot;</span><br><br><span class="hljs-comment"># 特征码文件</span><br>HASH_FILE = <span class="hljs-string">&quot;/media/pi/Elements/nas/qbit/hash.txt&quot;</span><br><span class="hljs-comment"># 完整磁力链接生成位置</span><br>RESULT_FILE = <span class="hljs-string">&quot;/media/pi/Elements/nas/qbit/result/result.txt&quot;</span><br><br><span class="hljs-comment"># 文件名与目录规则映射文件</span><br>JSON_FILE = <span class="hljs-string">&quot;/media/pi/Elements/nas/qbit/dir.json&quot;</span><br><span class="hljs-comment"># 下载目录</span><br>NEW_VIDEO_PATH = <span class="hljs-string">&quot;/media/pi/Elements/nas/video/new&quot;</span><br><br><span class="hljs-comment"># 定义换行符</span><br>LF = <span class="hljs-string">&quot;\n&quot;</span><br>CRLF = <span class="hljs-string">&quot;\r\n&quot;</span><br><br><br><span class="hljs-comment"># 将新下载的视频按照规则归档到指定文件夹</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">archive_new_video</span>(<span class="hljs-params">new_path, json_file</span>):</span><br>    home_path = os.path.split(new_path)[<span class="hljs-number">0</span>]<br><br>    <span class="hljs-comment"># 列出父目录下所有文件</span><br>    videos = os.listdir(new_path)<br><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(json_file, encoding=<span class="hljs-string">&quot;utf-8&quot;</span>) <span class="hljs-keyword">as</span> f:<br>        dir_relation = json.load(f)<br><br>    <span class="hljs-keyword">for</span> video <span class="hljs-keyword">in</span> videos:<br>        <span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> dir_relation.items():<br>            <span class="hljs-keyword">for</span> name <span class="hljs-keyword">in</span> v:<br>                <span class="hljs-keyword">if</span> name <span class="hljs-keyword">in</span> video:<br>                    target_dir = os.path.join(home_path, k)<br>                    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(target_dir):<br>                        os.makedirs(target_dir)<br>                    <br>                    target_path = os.path.join(target_dir, video)<br>                    ori_path = os.path.join(new_path, video)<br>                    shutil.move(ori_path, target_path)<br><br>                    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;move [%s] --&gt; [%s]&quot;</span> % (ori_path, target_path))<br><br><br><span class="hljs-comment"># 删除文件</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">del_path</span>(<span class="hljs-params">path</span>):</span><br>    <span class="hljs-keyword">if</span> os.path.exists(path):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;now remove last result file: &quot;</span> + path)<br>        os.remove(path)<br><br><br><span class="hljs-comment"># 生成结果文件</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">write_txt_result</span>(<span class="hljs-params">result, result_path</span>):</span><br>    path_list = os.path.split(result_path)<br>    parent_path = path_list[<span class="hljs-number">0</span>]<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(parent_path):<br>        os.makedirs(parent_path)<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(result_path, <span class="hljs-string">&#x27;a&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        f.write(result)<br><br><br><span class="hljs-comment"># 拼接完整的磁力链接</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">gen_full_magnet</span>(<span class="hljs-params">ori_path, result_path, prefix</span>):</span><br>    <span class="hljs-comment"># 清理上次产生的结果文件</span><br>    <span class="hljs-comment"># del_path(result_path)</span><br><br>    <span class="hljs-comment"># 读取文件</span><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(ori_path, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        <span class="hljs-comment"># 先把所有内容以行为单位读取到内存里</span><br>        lines = f.readlines()<br><br>        <span class="hljs-comment"># 初始化结果文本</span><br>        result = <span class="hljs-string">&quot;&quot;</span><br><br>        <span class="hljs-comment"># 循环每一行字符串</span><br>        <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> lines:<br>            <span class="hljs-comment"># 对该行字符串做替换，并与结果进行拼接</span><br>            result = result + prefix + line<br>        <br>        <span class="hljs-comment"># 循环完毕加一个换行符，便于多文件的结果显示</span><br>        <span class="hljs-comment"># result = result + LF</span><br><br>        <span class="hljs-comment"># 将结果写到文件中</span><br>        <span class="hljs-comment"># write_txt_result(result, result_path)</span><br><br>        <span class="hljs-comment">#复制到剪切板</span><br>        cb.copy(result)<br><br>        <span class="hljs-comment"># 打印结果</span><br>        <span class="hljs-built_in">print</span>(result)<br><br><br><span class="hljs-comment"># 脚本入口</span><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    arg = sys.argv[<span class="hljs-number">1</span>]<br>    <span class="hljs-keyword">if</span> arg == <span class="hljs-string">&quot;link&quot;</span>:<br>        gen_full_magnet(HASH_FILE, RESULT_FILE, MAGNET_PREFIX)<br>    <span class="hljs-keyword">elif</span> arg == <span class="hljs-string">&quot;archive&quot;</span>:<br>        archive_new_video(NEW_VIDEO_PATH, JSON_FILE)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;input error.&quot;</span>)<br>        <br>    <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;press any button.&quot;</span>)<br></code></pre></td></tr></table></figure><p>实际使用时，需要先安装一个依赖包：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">pip install pandas<br></code></pre></td></tr></table></figure><p>设置别名</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">alias qbit=&quot;python /media/pi/Elements/nas/qbit/tools/qbit_tool.py&quot;<br></code></pre></td></tr></table></figure><p>生成磁力链接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">qbit link<br></code></pre></td></tr></table></figure><p><img src="/2023/08/19/%E4%BD%8E%E6%88%90%E6%9C%AC%E5%AE%B6%E5%BA%ADnas%E6%90%AD%E5%BB%BA/9.png" alt="qbit link"></p><p><img src="/2023/08/19/%E4%BD%8E%E6%88%90%E6%9C%AC%E5%AE%B6%E5%BA%ADnas%E6%90%AD%E5%BB%BA/10.png" alt="qbittorrent会自动读取生成的结果"></p><p>下载完成后进行归档</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">qbit archive<br></code></pre></td></tr></table></figure><p><img src="/2023/08/19/%E4%BD%8E%E6%88%90%E6%9C%AC%E5%AE%B6%E5%BA%ADnas%E6%90%AD%E5%BB%BA/11.png" alt="归档"></p>]]></content>
    
    
    <categories>
      
      <category>服务器</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>python</tag>
      
      <tag>树莓派</tag>
      
      <tag>smb</tag>
      
      <tag>dlna</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ORACLE表空间优化</title>
    <link href="/2022/06/02/ORACLE%E8%A1%A8%E7%A9%BA%E9%97%B4%E4%BC%98%E5%8C%96/"/>
    <url>/2022/06/02/ORACLE%E8%A1%A8%E7%A9%BA%E9%97%B4%E4%BC%98%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h2 id="FSFI"><a href="#FSFI" class="headerlink" title="FSFI"></a>FSFI</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> a.TABLESPACE_NAME,<br>TRUNC(<span class="hljs-number">100</span><span class="hljs-operator">*</span><span class="hljs-built_in">SQRT</span>(<span class="hljs-built_in">MAX</span>(BLOCKS)<span class="hljs-operator">/</span><span class="hljs-built_in">SUM</span>(BLOCKS))<span class="hljs-operator">/</span><span class="hljs-built_in">SQRT</span>(<span class="hljs-built_in">SQRT</span>(<span class="hljs-built_in">COUNT</span>(BLOCKS))),<span class="hljs-number">2</span>) FSFI<br><span class="hljs-keyword">FROM</span> DBA_FREE_SPACE a, DBA_TABLESPACES b<br><span class="hljs-keyword">WHERE</span> a.TABLESPACE_NAME<span class="hljs-operator">=</span>b.TABLESPACE_NAME<br><span class="hljs-keyword">AND</span> b.CONTENT <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">IN</span> (<span class="hljs-string">&#x27;TEMPORARY&#x27;</span>,<span class="hljs-string">&#x27;UNDO&#x27;</span>,<span class="hljs-string">&#x27;SYSAUX&#x27;</span>)<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> a.TABLESPACE_NAME <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> FSFI;<br></code></pre></td></tr></table></figure><p>上述sql 可查询FSFI（free space fragmentation index 空闲空间碎片索引）来作为表空间碎片参考，普遍认为100为理想值，低于30则碎片过多。但仅适用于表空间管理方式为DMT（dictionary managed tablespace 字典管理）的情况。</p><h2 id="DMT表空间碎片"><a href="#DMT表空间碎片" class="headerlink" title="DMT表空间碎片"></a>DMT表空间碎片</h2><p>oracle数据存储概念：tablespace -&gt; segment -&gt; extent -&gt; block</p><p>字典管理的表空间，segment 中分配的extent 大小不一，反复创建、回收对象后，存留一些极小的空闲extent 无法再被利用，产生气泡碎片。</p><p>表空间碎片的影响：</p><ol><li>空间浪费。</li><li>性能问题。DMT 每次分配extent 时需要扫描UET$、FET$ 两张数据字典表，寻找可用大小的空间，碎片越多，意味着分配速度越慢。</li></ol><p>可用以下sql 合并碎片空间：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span>SPACE $tablespace_name COALESCE;<br></code></pre></td></tr></table></figure><h2 id="LMT提高FSFI"><a href="#LMT提高FSFI" class="headerlink" title="LMT提高FSFI"></a>LMT提高FSFI</h2><p>LMT 即 locally managed tablespace 本地管理，oracle 9i 以后默认为LMT。</p><p>LMT 管理机制与DMT 不同，LMT在表空间的数据文件头部加入了一个位图区域，在其中记录每个extent的使用状况，分配的extent 大小统一（uniform 下均为给定值； autollocate 系统自动分配，64K、1M、8M……），不存在表空间碎片，FSFI 对LMT 无参考意义。</p><p>但是可以想办法提高FSFI 的值。</p><p>分析FSFI 的sql 可知，FSFI 本质上是计算最大空闲extent 占所有空闲extent 的块（block）的比例，想办法让extent 数量变少、分配的block 连续即可。</p><h3 id="回收站清除"><a href="#回收站清除" class="headerlink" title="回收站清除"></a>回收站清除</h3><p>分析测试库的DBA_FREE_SPACE 发现一个现象：很多空闲block 的id 连续，但不属于同一个extent。原因是回收站中还有该表空间的驻留对象，对其进行清除，可提高FSFI：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">PURGE TABLESPACE $tablespace_name;<br></code></pre></td></tr></table></figure><h3 id="重建表空间"><a href="#重建表空间" class="headerlink" title="重建表空间"></a>重建表空间</h3><p>表空间新建时没有频繁创建、销毁对象，也就不存在大量空间分配行为，此时extent 完整且连续。</p><p>可将原表空间数据导出，新建一个表空间后再导入</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 创建目录映射</span><br><span class="hljs-keyword">CREATE</span> DIRECTORY DIR <span class="hljs-keyword">AS</span> <span class="hljs-string">&#x27;/home/oracle&#x27;</span>;<br><span class="hljs-keyword">GRANT</span> READ,WRITE <span class="hljs-keyword">ON</span> DIRECTORY DIR <span class="hljs-keyword">TO</span> $<span class="hljs-keyword">user</span>;<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">-- 基于表空间导出dump文件<br>expdp $user/$pwd@$instance direactory=DIR dumpfile=mine.dmp logfile=exp.log tablespaces=$tablespace_name<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 删除原表空间</span><br><span class="hljs-keyword">DROP</span> TABLESPACE $tablespace_name INCLUDING CONTENTS <span class="hljs-keyword">AND</span> DATAFILES;<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 创建表空间</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span>SPACE $tablespace_name<br>DATAFILE <span class="hljs-string">&#x27;/oradata/test.dbf&#x27;</span> SIZE <span class="hljs-number">1024</span>M AUTOEXTEND <span class="hljs-keyword">ON</span> NEXT <span class="hljs-number">10</span>M MAXSIZE <span class="hljs-number">10240</span>M;<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">-- 将dump文件导入新表空间<br>impdp $user/$pwd dumpfile=mine.dmp table_exists_action=replace logfile=imp.log directory=DIR<br>-- remap_tablespace=$param1:$param2,$temp1:$temp2<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据库</tag>
      
      <tag>oracle</tag>
      
      <tag>sql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>0前端经验，被任天堂逼着写了个网页</title>
    <link href="/2022/05/04/0%E5%89%8D%E7%AB%AF%E7%BB%8F%E9%AA%8C%EF%BC%8C%E8%A2%AB%E4%BB%BB%E5%A4%A9%E5%A0%82%E9%80%BC%E7%9D%80%E5%86%99%E4%BA%86%E4%B8%AA%E7%BD%91%E9%A1%B5/"/>
    <url>/2022/05/04/0%E5%89%8D%E7%AB%AF%E7%BB%8F%E9%AA%8C%EF%BC%8C%E8%A2%AB%E4%BB%BB%E5%A4%A9%E5%A0%82%E9%80%BC%E7%9D%80%E5%86%99%E4%BA%86%E4%B8%AA%E7%BD%91%E9%A1%B5/</url>
    
    <content type="html"><![CDATA[<h2 id="起"><a href="#起" class="headerlink" title="起"></a>起</h2><p>最近Nintendo switch sports 发售了，肥肠好玩！五一长假漫漫，恰好逢上日元大跌，我按捺不住退掉了之前预订但还没发货的实体游戏卡带，准备切到日服eshop 直接购买电子版进行游玩。</p><p>上一次在eshop 购买游戏还是<del>上一次</del>，那时候巴西区打折，我切过去购买了一些精品独立游戏，理所当然还有余额没花完以及金币若干。余额没花完不让切服，这是南美区的老传统了，但我身经百战，以我多年穿梭在美、日、美、港、美的丰富经验，凭感觉熟练打开on sale 页面，挑选了一个余额 + 金币能cover 住的小游戏，进行付款。</p><p>打完收功后还是无法切服，定睛一看，余额还剩0.01BRL，此时我还没意识到问题的严重性，以为是之前操作有误，继续挑选了一个完全用金币就能cover 的小游戏，进行一个款的付。结束后返回账户页面查看，顿时吐出一口老血，怎么还是剩那个0.01啊啊啊啊！！！</p><h2 id="承"><a href="#承" class="headerlink" title="承"></a>承</h2><p>仔细研究了下问题出在金币这儿，和日、美、港不同，在巴西1金币并不等同于1最小货币单位，而是1金币 = 0.05BRL，以我当前还剩0.01BRL 余额来举例，若用金币搭配购买游戏，需要购买价格中小数点最末尾为1（0.01）或6（0.01 + 0.05 = 0.06）的游戏才可能耗尽余额。</p><p>但事已至此，余额和金币不够再买任何游戏了，弹尽粮绝，想要从巴西区逃离，只能从某宝购买一张50 or 100BRL 的点卡，来配合花完那个0.01，但如此一来情况就变得复杂了，购买多个游戏，意味着余额与金币瞬息万变，怎么才能恰好花完？只能拿个小本本边买边算。</p><p>我整理了一下已知的规则，用java 写了段代码，来辅助计算：</p><ol><li> 1金币 = 0.05BRL</li><li> 游戏售价 1BRL 送1金币，不满1BRL 的也送1金币</li><li> 优先使用余额支付游戏，不足的地方用金币来补齐</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Eshop</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> BigDecimal balance;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> coin;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> clean;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> exit;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Eshop</span><span class="hljs-params">(BigDecimal balance, <span class="hljs-keyword">int</span> coin)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.balance = balance;<br>        <span class="hljs-keyword">this</span>.coin = coin;<br>        <span class="hljs-keyword">this</span>.clean = <span class="hljs-keyword">false</span>;<br>        <span class="hljs-keyword">this</span>.exit = <span class="hljs-keyword">false</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">buy</span><span class="hljs-params">(BigDecimal price)</span> </span>&#123;<br>        BigDecimal tempBalance = balance.subtract(price);<br>        <span class="hljs-keyword">int</span> goodCoin = price.setScale(<span class="hljs-number">0</span>, BigDecimal.ROUND_UP).intValue();<br><br>        <span class="hljs-keyword">if</span> (tempBalance.compareTo(<span class="hljs-keyword">new</span> BigDecimal(<span class="hljs-string">&quot;0&quot;</span>)) &lt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">int</span> needCoin = tempBalance.abs().divide(<span class="hljs-keyword">new</span> BigDecimal(<span class="hljs-string">&quot;0.05&quot;</span>), <span class="hljs-number">0</span>, BigDecimal.ROUND_UP).intValue();<br>            <span class="hljs-keyword">if</span> (needCoin &gt; coin) &#123;<br>                printResult(<span class="hljs-keyword">true</span>);<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            <span class="hljs-comment">// 此处计算规则有误 应该先算出抵扣金币后的游戏价格 重新计算金币数</span><br>            balance = balance.add(<span class="hljs-keyword">new</span> BigDecimal(needCoin).multiply(<span class="hljs-keyword">new</span> BigDecimal(<span class="hljs-string">&quot;0.05&quot;</span>))).subtract(price);<br>            coin -= needCoin;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            balance = tempBalance;<br>            coin += goodCoin;<br>        &#125;<br><br>        clean = balance.compareTo(<span class="hljs-keyword">new</span> BigDecimal(<span class="hljs-string">&quot;0&quot;</span>)) == <span class="hljs-number">0</span>;<br>        printResult(<span class="hljs-keyword">false</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">printResult</span><span class="hljs-params">(<span class="hljs-keyword">boolean</span> isExit)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (isExit) &#123;<br>            exit = <span class="hljs-keyword">true</span>;<br>            System.out.println(<span class="hljs-string">&quot;余额不足！&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            String template = <span class="hljs-string">&quot;此次购买后余额为[&quot;</span>+balance+<span class="hljs-string">&quot;]，金币为[&quot;</span>+coin+<span class="hljs-string">&quot;]，是否清零[&quot;</span>+clean+<span class="hljs-string">&quot;]&quot;</span>;<br>            exit = clean;<br>            <span class="hljs-keyword">if</span> (!exit) &#123;<br>                BigDecimal high =  balance.add(<span class="hljs-keyword">new</span> BigDecimal(coin).multiply(<span class="hljs-keyword">new</span> BigDecimal(<span class="hljs-string">&quot;0.05&quot;</span>)));<br>                String extend = <span class="hljs-string">&quot; 可购买价格区间[&quot;</span>+balance+<span class="hljs-string">&quot;~&quot;</span>+high+<span class="hljs-string">&quot;]&quot;</span>;<br>                template += extend;<br>            &#125;<br>            System.out.println(template);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isExit</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> exit;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">process</span><span class="hljs-params">(Scanner sc)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;*** start ***&quot;</span>);<br><span class="hljs-comment">//        System.out.println(&quot;请输入余额：&quot;);</span><br><span class="hljs-comment">//        double balance = sc.nextDouble();</span><br><span class="hljs-comment">//        System.out.println(&quot;请输入余币：&quot;);</span><br><span class="hljs-comment">//        int coin = sc.nextInt();</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            Eshop eshop = <span class="hljs-keyword">new</span> Eshop(<span class="hljs-keyword">new</span> BigDecimal(<span class="hljs-string">&quot;100.01&quot;</span>), <span class="hljs-number">9</span>);<br>            <span class="hljs-keyword">while</span> (!eshop.isExit()) &#123;<br>                System.out.println(<span class="hljs-string">&quot;请输入游戏价格：&quot;</span>);<br>                String input = sc.nextLine();<br>                BigDecimal price = <span class="hljs-keyword">new</span> BigDecimal(input);<br>                <span class="hljs-keyword">if</span> (price.compareTo(<span class="hljs-keyword">new</span> BigDecimal(<span class="hljs-string">&quot;0&quot;</span>)) &lt;= <span class="hljs-number">0</span>)<br>                    process(sc);<br>                eshop.buy(price);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            process(sc);<br>        &#125;<br>        process(sc);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Scanner sc = <span class="hljs-keyword">new</span> Scanner(System.in);<br>        process(sc);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2022/05/04/0%E5%89%8D%E7%AB%AF%E7%BB%8F%E9%AA%8C%EF%BC%8C%E8%A2%AB%E4%BB%BB%E5%A4%A9%E5%A0%82%E9%80%BC%E7%9D%80%E5%86%99%E4%BA%86%E4%B8%AA%E7%BD%91%E9%A1%B5/1-1.jpg" alt="自测一下"></p><p>写完这个，我简单测了一下，感觉可行。但是一想到刚买oculus quest2，我玩节奏光剑也是运动，何苦又花钱折腾去买switch sports 呢。于是我转身折腾VR 去了。</p><h2 id="转"><a href="#转" class="headerlink" title="转"></a>转</h2><p>第二天早上躺床上刷微博，看到王晓光在夸NS sports 里面的足球多么多么好玩、多么多么有创意，我又开始心动了，但一联想到还困在巴西服呢，就生气。</p><p>会不会有人和我一样只有一个账号被困在巴西服出不去？我是不是可以把昨天的java 代码做成一个静态页面，给有需要的人使用？这个念头突然开始在我脑中盘旋。说干就干，我一跃而起，打开电脑。</p><p>我从来没正儿八经地写过前端页面，但是javascript 和java 名字都差不多，我把这段代码搬过去用作计算逻辑，用html 写两个输入框代替控制台，这不就成了吗？</p><p>正所谓人靠衣装，佛靠金装，页面也得漂漂亮亮的才能显出我技术高超，于是第一件事，我先点开<del>饿了么</del> element-ui 页面，按照教程引入了一下组件，copy 了一下输入框代码，又copy 了两个按钮代码。看教程示例代码，使用的vue 框架，于是又打开vue 的官方文档，引入了一下vue ，开始学着用vue 来实现我想要的效果。</p><p>研究了一个白天，磕磕碰碰，算是把页面功能都实现好了，但是布局好丑啊，于是又打开阮一峰的博客，研究css 怎么写，于是一晚上又过去了。中途还意识到页面在移动端和pc 端显示效果不一样，一开始以为是ui 框架的问题，又去翻了mint ui、cube-ui 的文档，简单重构了一下，发现不是那么回事。。。前端水太深了。。。</p><p>最终解决完移动端问题，弄好布局样式，已经是凌晨2点，掏出switch 亲自试验了一下，逃出了巴西服，当然也发现了之前计算规则里遗漏的小bug，顺手修复了。</p><p><img src="/2022/05/04/0%E5%89%8D%E7%AB%AF%E7%BB%8F%E9%AA%8C%EF%BC%8C%E8%A2%AB%E4%BB%BB%E5%A4%A9%E5%A0%82%E9%80%BC%E7%9D%80%E5%86%99%E4%BA%86%E4%B8%AA%E7%BD%91%E9%A1%B5/1-2.png" alt="充了100的点卡"></p><p><img src="/2022/05/04/0%E5%89%8D%E7%AB%AF%E7%BB%8F%E9%AA%8C%EF%BC%8C%E8%A2%AB%E4%BB%BB%E5%A4%A9%E5%A0%82%E9%80%BC%E7%9D%80%E5%86%99%E4%BA%86%E4%B8%AA%E7%BD%91%E9%A1%B5/1-3.png" alt="清零完毕，最终按着这个游戏清单购买，成功逃出巴西服"></p><h2 id="合"><a href="#合" class="headerlink" title="合"></a>合</h2><p>之前做mhgu 百科小程序，租用了腾讯云的一台服务器，本来想的是把这个页面直接丢上去，配了下nginx 配置，没成功。此时太困了，干脆把这个页面丢到了后端项目的静态资源里，简单写了个接口，打包发版。地址为 <a href="https://mhgu.top/eshop">https://mhgu.top/eshop</a></p><p>算是大功告成了。中间还是遇到了一些有意思的问题，比如js 如何处理浮点数精度、js 里对象引用与深拷贝浅拷贝，统统通过面向搜索引擎编程解决。下面是整个页面的源码（省略了css部分）：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width,initial-scale=1.0, user-scalable=no&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- import Vue before Element --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js.package/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- import JavaScript --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://unpkg.com/element-ui@2.15.7/lib/index.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 引入样式 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://unpkg.com/element-ui@2.15.7/lib/theme-chalk/index.css&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;shortcut icon&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;image/x-icon&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;pic/monster/jsz.png&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>巴西eshop余额清零计算器<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br>...<br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;title&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">top</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;left&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;cen&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;goods&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(good, index) in goods&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;index&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;input-box&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;input-box&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;p-class&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;el-icon-s-goods&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span> 游戏&#123;&#123;index + 1&#125;&#125;价格(BRL)：<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">el-input</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;input-class&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;top-in&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;good.price&quot;</span> <span class="hljs-attr">oninput</span>=<span class="hljs-string">&quot;value=value.replace(/[^\d\.]/g,&#x27;&#x27;)&quot;</span> <span class="hljs-attr">maxLength</span>=<span class="hljs-string">&#x27;9&#x27;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入&quot;</span> <span class="hljs-attr">:disabled</span>=<span class="hljs-string">&quot;good.init&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-input</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;clear&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;warning&quot;</span> <span class="hljs-attr">plain</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;resetOne&quot;</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;good.clear&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;el-icon-delete&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span> 清除<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;inits&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;balance&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;input-box&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;p-class&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;el-icon-bank-card&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span> 余额(BRL)：<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">el-input</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;input-class-last&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;balance&quot;</span> <span class="hljs-attr">oninput</span>=<span class="hljs-string">&quot;value=value.replace(/[^\d\.]/g,&#x27;&#x27;)&quot;</span> <span class="hljs-attr">maxLength</span>=<span class="hljs-string">&#x27;9&#x27;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入初始余额&quot;</span> <span class="hljs-attr">:disabled</span>=<span class="hljs-string">&quot;init&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-input</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;coin&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;input-box&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;p-class&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;el-icon-coin&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span> 金币：<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">el-input</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;input-class-last&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;coin&quot;</span> <span class="hljs-attr">oninput</span>=<span class="hljs-string">&quot;value=value.replace(/[^\d]/g,&#x27;&#x27;)&quot;</span> <span class="hljs-attr">maxLength</span>=<span class="hljs-string">&#x27;9&#x27;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入初始金币数&quot;</span> <span class="hljs-attr">:disabled</span>=<span class="hljs-string">&quot;init&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-input</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;right&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">mid</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;msg0&quot;</span>&gt;</span>可购买价格区间 &#123;&#123;balance&#125;&#125;~&#123;&#123;realBalance&#125;&#125; (BRL) 的游戏<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;msg1&quot;</span>&gt;</span>余额不足！<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;msg2&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;msg2&quot;</span>&gt;</span> *** 恭喜余额已清零！ *** <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">bot</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;danger&quot;</span> <span class="hljs-attr">plain</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;resetAll&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;el-icon-refresh-left&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span> 全部重置<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;primary&quot;</span> <span class="hljs-attr">plain</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;startBuy&quot;</span> <span class="hljs-attr">:disabled</span>=<span class="hljs-string">&quot;cannotBuy&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;el-icon-shopping-cart-2&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span> &#123;&#123;start&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;explain&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">el-card</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box-card&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">&quot;header&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;clearfix&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>使用说明<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;float: right; padding: 3px 0&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text item&quot;</span>&gt;</span><br>    - 本页面所有货币单位均为巴西雷亚尔（BRL）<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text item&quot;</span>&gt;</span><br>    - 输入eshop余额与金币数量，点击“开始”按钮开始<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text item&quot;</span>&gt;</span><br>    - 依次输入想要购买的游戏价格，并点击“购买”，将自动计算余额与金币数<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text item&quot;</span>&gt;</span><br>- 每次购买遵循：优先使用余额，不足部分使用金币补齐，1金币=0.05BRL<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text item&quot;</span>&gt;</span><br>    - 可点击“清除”，撤销上一次购买<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text item&quot;</span>&gt;</span><br>    - 当余额为0时计算结束<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text item&quot;</span>&gt;</span><br>    - 点击“全部重置”删除所有记录<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text item&quot;</span>&gt;</span><br>- 联系我：<span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;mailto:thbb268@live.com&quot;</span>&gt;</span>thbb268@live.com<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">el-card</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">var</span> floatObj = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-comment">/*</span></span><br><span class="hljs-comment"><span class="javascript">         * 判断obj是否为一个整数</span></span><br><span class="hljs-comment"><span class="javascript">         */</span></span><br><span class="javascript">        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isInteger</span>(<span class="hljs-params">obj</span>) </span>&#123;</span><br><span class="javascript">            <span class="hljs-keyword">return</span> <span class="hljs-built_in">Math</span>.floor(obj) === obj</span><br><span class="javascript">        &#125;</span><br><span class="javascript"> </span><br><span class="javascript">        <span class="hljs-comment">/*</span></span><br><span class="hljs-comment"><span class="javascript">         * 将一个浮点数转成整数，返回整数和倍数。如 3.14 &gt;&gt; 314，倍数是 100</span></span><br><span class="hljs-comment"><span class="javascript">         * @param floatNum &#123;number&#125; 小数</span></span><br><span class="hljs-comment"><span class="javascript">         * @return &#123;object&#125;</span></span><br><span class="hljs-comment"><span class="javascript">         *   &#123;times:100, num: 314&#125;</span></span><br><span class="hljs-comment"><span class="javascript">         */</span></span><br><span class="javascript">        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">toInteger</span>(<span class="hljs-params">floatNum</span>) </span>&#123;</span><br><span class="javascript">            <span class="hljs-keyword">var</span> ret = &#123;<span class="hljs-attr">times</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">num</span>: <span class="hljs-number">0</span>&#125;;</span><br><span class="javascript">            <span class="hljs-keyword">if</span> (isInteger(floatNum)) &#123;</span><br><span class="javascript">                ret.num = floatNum;</span><br><span class="javascript">                <span class="hljs-keyword">return</span> ret</span><br><span class="javascript">            &#125;</span><br><span class="javascript">            <span class="hljs-keyword">var</span> strfi = floatNum + <span class="hljs-string">&#x27;&#x27;</span>;</span><br><span class="javascript">            <span class="hljs-keyword">var</span> dotPos = strfi.indexOf(<span class="hljs-string">&#x27;.&#x27;</span>);</span><br><span class="javascript">            <span class="hljs-keyword">var</span> len = strfi.substr(dotPos + <span class="hljs-number">1</span>).length;</span><br><span class="javascript">            <span class="hljs-keyword">var</span> times = <span class="hljs-built_in">Math</span>.pow(<span class="hljs-number">10</span>, len);</span><br><span class="javascript">            <span class="hljs-keyword">var</span> intNum = <span class="hljs-built_in">parseInt</span>(floatNum * times + <span class="hljs-number">0.5</span>, <span class="hljs-number">10</span>);</span><br><span class="javascript">            ret.times = times;</span><br><span class="javascript">            ret.num = intNum;</span><br><span class="javascript">            <span class="hljs-keyword">return</span> ret</span><br><span class="javascript">        &#125;</span><br><span class="javascript"> </span><br><span class="javascript">        <span class="hljs-comment">/*</span></span><br><span class="hljs-comment"><span class="javascript">         * 核心方法，实现加减乘除运算，确保不丢失精度</span></span><br><span class="hljs-comment"><span class="javascript">         * 思路：把小数放大为整数（乘），进行算术运算，再缩小为小数（除）</span></span><br><span class="hljs-comment"><span class="javascript">         *</span></span><br><span class="hljs-comment"><span class="javascript">         * @param a &#123;number&#125; 运算数1</span></span><br><span class="hljs-comment"><span class="javascript">         * @param b &#123;number&#125; 运算数2</span></span><br><span class="hljs-comment"><span class="javascript">         * @param op &#123;string&#125; 运算类型，有加减乘除（add/subtract/multiply/divide）</span></span><br><span class="hljs-comment"><span class="javascript">         *</span></span><br><span class="hljs-comment"><span class="javascript">         */</span></span><br><span class="javascript">        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">operation</span>(<span class="hljs-params">a, b, op</span>) </span>&#123;</span><br><span class="javascript">            <span class="hljs-keyword">var</span> o1 = toInteger(a);</span><br><span class="javascript">            <span class="hljs-keyword">var</span> o2 = toInteger(b);</span><br><span class="javascript">            <span class="hljs-keyword">var</span> n1 = o1.num;</span><br><span class="javascript">            <span class="hljs-keyword">var</span> n2 = o2.num;</span><br><span class="javascript">            <span class="hljs-keyword">var</span> t1 = o1.times;</span><br><span class="javascript">            <span class="hljs-keyword">var</span> t2 = o2.times;</span><br><span class="javascript">            <span class="hljs-keyword">var</span> max = t1 &gt; t2 ? t1 : t2;</span><br><span class="javascript">            <span class="hljs-keyword">var</span> result = <span class="hljs-literal">null</span>;</span><br><span class="javascript">            <span class="hljs-keyword">switch</span> (op) &#123;</span><br><span class="javascript">                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;add&#x27;</span>:</span><br><span class="javascript">                    <span class="hljs-keyword">if</span> (t1 === t2) &#123; <span class="hljs-comment">// 两个小数位数相同</span></span><br><span class="javascript">                        result = n1 + n2</span><br><span class="javascript">                    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (t1 &gt; t2) &#123; <span class="hljs-comment">// o1 小数位 大于 o2</span></span><br><span class="javascript">                        result = n1 + n2 * (t1 / t2)</span><br><span class="javascript">                    &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// o1 小数位 小于 o2</span></span><br><span class="javascript">                        result = n1 * (t2 / t1) + n2</span><br><span class="javascript">                    &#125;</span><br><span class="javascript">                    <span class="hljs-keyword">return</span> result / max;</span><br><span class="javascript">                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;subtract&#x27;</span>:</span><br><span class="javascript">                    <span class="hljs-keyword">if</span> (t1 === t2) &#123;</span><br><span class="javascript">                        result = n1 - n2</span><br><span class="javascript">                    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (t1 &gt; t2) &#123;</span><br><span class="javascript">                        result = n1 - n2 * (t1 / t2)</span><br><span class="javascript">                    &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="javascript">                        result = n1 * (t2 / t1) - n2</span><br><span class="javascript">                    &#125;</span><br><span class="javascript">                    <span class="hljs-keyword">return</span> result / max;</span><br><span class="javascript">                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;multiply&#x27;</span>:</span><br><span class="javascript">                    result = (n1 * n2) / (t1 * t2);</span><br><span class="javascript">                    <span class="hljs-keyword">return</span> result;</span><br><span class="javascript">                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;divide&#x27;</span>:</span><br><span class="javascript">                    result = (n1 / n2) * (t2 / t1);</span><br><span class="javascript">                    <span class="hljs-keyword">return</span> result</span><br><span class="javascript">            &#125;</span><br><span class="javascript">        &#125;</span><br><span class="javascript"> </span><br><span class="javascript">        <span class="hljs-comment">// 加减乘除的四个接口</span></span><br><span class="javascript">        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add</span>(<span class="hljs-params">a, b</span>) </span>&#123;</span><br><span class="javascript">            <span class="hljs-keyword">return</span> operation(a, b, <span class="hljs-string">&#x27;add&#x27;</span>)</span><br><span class="javascript">        &#125;</span><br><span class="javascript"> </span><br><span class="javascript">        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">subtract</span>(<span class="hljs-params">a, b</span>) </span>&#123;</span><br><span class="javascript">            <span class="hljs-keyword">return</span> operation(a, b, <span class="hljs-string">&#x27;subtract&#x27;</span>)</span><br><span class="javascript">        &#125;</span><br><span class="javascript"> </span><br><span class="javascript">        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">multiply</span>(<span class="hljs-params">a, b</span>) </span>&#123;</span><br><span class="javascript">            <span class="hljs-keyword">return</span> operation(a, b, <span class="hljs-string">&#x27;multiply&#x27;</span>)</span><br><span class="javascript">        &#125;</span><br><span class="javascript"> </span><br><span class="javascript">        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">divide</span>(<span class="hljs-params">a, b</span>) </span>&#123;</span><br><span class="javascript">            <span class="hljs-keyword">return</span> operation(a, b, <span class="hljs-string">&#x27;divide&#x27;</span>)</span><br><span class="javascript">        &#125;</span><br><span class="javascript"> </span><br><span class="javascript">        <span class="hljs-comment">// exports</span></span><br><span class="javascript">        <span class="hljs-keyword">return</span> &#123;</span><br><span class="javascript">            <span class="hljs-attr">add</span>: add,</span><br><span class="javascript">            <span class="hljs-attr">subtract</span>: subtract,</span><br><span class="javascript">            <span class="hljs-attr">multiply</span>: multiply,</span><br><span class="javascript">            <span class="hljs-attr">divide</span>: divide</span><br><span class="javascript">        &#125;</span><br><span class="javascript">    &#125;();</span><br><span class="javascript">    </span><br><span class="javascript">    <span class="hljs-keyword">const</span> rate = <span class="hljs-number">0.05</span></span><br><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">const</span> initData = &#123;</span><br><span class="javascript"><span class="hljs-attr">start</span>: <span class="hljs-string">&#x27;开始&#x27;</span>,</span><br><span class="javascript"><span class="hljs-attr">balance</span>: <span class="hljs-string">&#x27;&#x27;</span>,</span><br><span class="javascript"><span class="hljs-attr">coin</span>: <span class="hljs-string">&#x27;&#x27;</span>,</span><br><span class="javascript"><span class="hljs-attr">goods</span>: [],</span><br><span class="javascript"><span class="hljs-attr">realBalance</span>: <span class="hljs-string">&#x27;&#x27;</span>,</span><br><span class="javascript"><span class="hljs-attr">msg0</span>: <span class="hljs-literal">false</span>,</span><br><span class="javascript"><span class="hljs-attr">msg1</span>: <span class="hljs-literal">false</span>,</span><br><span class="javascript"><span class="hljs-attr">msg2</span>: <span class="hljs-literal">false</span>,</span><br><span class="javascript"><span class="hljs-attr">records</span>: [],</span><br><span class="javascript"><span class="hljs-attr">init</span>: <span class="hljs-literal">false</span>,</span><br><span class="javascript"><span class="hljs-attr">cannotBuy</span>: <span class="hljs-literal">false</span></span><br><span class="javascript">&#125;</span><br><span class="javascript">    </span><br><span class="javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">calRealBalance</span>(<span class="hljs-params">balance, coin</span>) </span>&#123;</span><br><span class="javascript"><span class="hljs-keyword">var</span> coinPrice = floatObj.multiply(coin, rate)</span><br><span class="javascript"><span class="hljs-keyword">return</span> floatObj.add(balance, coinPrice)</span><br><span class="javascript">&#125;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getCoin</span>(<span class="hljs-params">price</span>) </span>&#123;</span><br><span class="javascript"><span class="hljs-keyword">var</span> temp = <span class="hljs-built_in">Math</span>.floor(price)</span><br><span class="javascript"><span class="hljs-keyword">if</span> (temp == price) &#123;</span><br><span class="javascript"><span class="hljs-keyword">return</span> temp</span><br><span class="javascript">&#125;</span><br><span class="javascript"><span class="hljs-keyword">return</span> temp + <span class="hljs-number">1</span></span><br><span class="javascript">&#125;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript"><span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="javascript"><span class="hljs-attr">data</span>: <span class="hljs-built_in">JSON</span>.parse(<span class="hljs-built_in">JSON</span>.stringify(initData)),</span><br><span class="javascript"><span class="hljs-attr">methods</span>: &#123;</span><br><span class="javascript"><span class="hljs-attr">startBuy</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript"><span class="hljs-built_in">this</span>.start = <span class="hljs-string">&#x27;购买&#x27;</span></span><br><span class="javascript"><span class="hljs-built_in">this</span>.init = <span class="hljs-literal">true</span></span><br><span class="javascript"><span class="hljs-built_in">this</span>.goods.push(&#123;<span class="hljs-attr">price</span>: <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-attr">init</span>: <span class="hljs-literal">false</span>, <span class="hljs-attr">clear</span>: <span class="hljs-literal">false</span>&#125;)</span><br><span class="javascript"><span class="hljs-keyword">var</span> currentIndex = <span class="hljs-built_in">this</span>.goods.length - <span class="hljs-number">1</span></span><br><span class="javascript"><span class="hljs-built_in">this</span>.records.push(&#123;<span class="hljs-attr">index</span>: currentIndex, <span class="hljs-attr">balance</span>: <span class="hljs-built_in">this</span>.balance, <span class="hljs-attr">coin</span>: <span class="hljs-built_in">this</span>.coin&#125;)</span><br><span class="javascript"><span class="hljs-keyword">if</span> (currentIndex &gt; <span class="hljs-number">0</span>) &#123;</span><br><span class="javascript"><span class="hljs-keyword">var</span> goodIndex = currentIndex - <span class="hljs-number">1</span></span><br><span class="javascript"><span class="hljs-keyword">var</span> goodPrice = <span class="hljs-built_in">this</span>.goods[goodIndex].price</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">if</span> (!goodPrice) &#123;</span><br><span class="javascript"><span class="hljs-built_in">this</span>.goods.pop()</span><br><span class="javascript"><span class="hljs-built_in">this</span>.records.pop()</span><br><span class="javascript"><span class="hljs-built_in">this</span>.$message(&#123;</span><br><span class="javascript">          <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入游戏价格！&#x27;</span>,</span><br><span class="javascript">          <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;warning&#x27;</span></span><br><span class="javascript">        &#125;)</span><br><span class="javascript"><span class="hljs-keyword">return</span></span><br><span class="javascript">&#125;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">var</span> goodCoin = getCoin(goodPrice)</span><br><span class="javascript"><span class="hljs-keyword">var</span> tempBalance = floatObj.subtract(<span class="hljs-built_in">this</span>.balance, goodPrice)</span><br><span class="javascript"><span class="hljs-keyword">if</span> (tempBalance &lt; <span class="hljs-number">0</span>) &#123;</span><br><span class="javascript">tempBalance = floatObj.subtract(goodPrice, <span class="hljs-built_in">this</span>.balance)</span><br><span class="javascript"><span class="hljs-keyword">var</span> needCoin = floatObj.divide(tempBalance, rate)</span><br><span class="javascript">needCoin = getCoin(needCoin)</span><br><span class="javascript"><span class="hljs-keyword">if</span> (needCoin &gt; <span class="hljs-built_in">this</span>.coin) &#123;</span><br><span class="javascript"><span class="hljs-comment">// 终止 无法计算</span></span><br><span class="javascript"><span class="hljs-comment">//this.msg1 = true</span></span><br><span class="javascript"><span class="hljs-built_in">this</span>.goods.pop()</span><br><span class="javascript"><span class="hljs-built_in">this</span>.records.pop()</span><br><span class="javascript"><span class="hljs-built_in">this</span>.$message(&#123;</span><br><span class="javascript">          <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;余额不足！&#x27;</span>,</span><br><span class="javascript">          <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;warning&#x27;</span></span><br><span class="javascript">        &#125;)</span><br><span class="javascript"><span class="hljs-keyword">return</span></span><br><span class="javascript">&#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="javascript"><span class="hljs-keyword">var</span> coinPrice = floatObj.multiply(needCoin, rate)</span><br><span class="javascript"><span class="hljs-keyword">var</span> needBalance = floatObj.subtract(goodPrice, coinPrice)</span><br><span class="javascript"><span class="hljs-keyword">if</span> (needBalance &gt; <span class="hljs-number">0</span>) &#123;</span><br><span class="javascript"><span class="hljs-built_in">this</span>.balance = floatObj.subtract(<span class="hljs-built_in">this</span>.balance, needBalance)</span><br><span class="javascript">&#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="javascript">needBalance = <span class="hljs-number">0</span></span><br><span class="javascript">&#125;</span><br><span class="javascript"><span class="hljs-built_in">this</span>.coin = floatObj.subtract(<span class="hljs-built_in">this</span>.coin, needCoin)</span><br><span class="javascript">goodCoin = getCoin(needBalance)</span><br><span class="javascript"><span class="hljs-built_in">this</span>.coin = floatObj.add(<span class="hljs-built_in">this</span>.coin, goodCoin)</span><br><span class="javascript"><span class="hljs-built_in">this</span>.goods[goodIndex].init = <span class="hljs-literal">true</span></span><br><span class="javascript"><span class="hljs-built_in">this</span>.goods[goodIndex].clear = <span class="hljs-literal">true</span></span><br><span class="javascript"><span class="hljs-keyword">if</span> (goodIndex &gt; <span class="hljs-number">0</span>) &#123;</span><br><span class="javascript"><span class="hljs-built_in">this</span>.goods[goodIndex-<span class="hljs-number">1</span>].clear = <span class="hljs-literal">false</span></span><br><span class="javascript">&#125;</span><br><span class="javascript">&#125;</span><br><span class="javascript">&#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="javascript"><span class="hljs-built_in">this</span>.balance = tempBalance</span><br><span class="javascript"><span class="hljs-built_in">this</span>.coin = floatObj.add(<span class="hljs-built_in">this</span>.coin, goodCoin)</span><br><span class="javascript"><span class="hljs-built_in">this</span>.goods[goodIndex].init = <span class="hljs-literal">true</span></span><br><span class="javascript"><span class="hljs-built_in">this</span>.goods[goodIndex].clear = <span class="hljs-literal">true</span></span><br><span class="javascript"><span class="hljs-keyword">if</span> (goodIndex &gt; <span class="hljs-number">0</span>) &#123;</span><br><span class="javascript"><span class="hljs-built_in">this</span>.goods[goodIndex-<span class="hljs-number">1</span>].clear = <span class="hljs-literal">false</span></span><br><span class="javascript">&#125;</span><br><span class="javascript">&#125;</span><br><span class="javascript">&#125;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.balance == <span class="hljs-number">0</span>) &#123;</span><br><span class="javascript"><span class="hljs-comment">// 终止 可以计算</span></span><br><span class="javascript"><span class="hljs-built_in">this</span>.msg2 = <span class="hljs-literal">true</span></span><br><span class="javascript"><span class="hljs-built_in">this</span>.cannotBuy = <span class="hljs-literal">true</span></span><br><span class="javascript"><span class="hljs-built_in">this</span>.$message(&#123;</span><br><span class="javascript">          <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;恭喜你，余额已清零！&#x27;</span>,</span><br><span class="javascript">          <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;success&#x27;</span></span><br><span class="javascript">        &#125;)</span><br><span class="javascript">&#125; </span><br><span class="javascript"><span class="hljs-built_in">this</span>.realBalance = calRealBalance(<span class="hljs-built_in">this</span>.balance, <span class="hljs-built_in">this</span>.coin)</span><br><span class="javascript"><span class="hljs-built_in">this</span>.msg0 = <span class="hljs-literal">true</span></span><br><span class="javascript">&#125;,</span><br><span class="javascript"><span class="hljs-attr">resetAll</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript"><span class="hljs-keyword">const</span> temp = <span class="hljs-built_in">JSON</span>.parse(<span class="hljs-built_in">JSON</span>.stringify(initData));</span><br><span class="javascript"><span class="hljs-built_in">Object</span>.assign(<span class="hljs-built_in">this</span>.$data, temp);</span><br><span class="javascript">&#125;,</span><br><span class="javascript"><span class="hljs-attr">resetOne</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript"><span class="hljs-built_in">this</span>.goods.pop()</span><br><span class="javascript"><span class="hljs-built_in">this</span>.goods.pop()</span><br><span class="javascript"><span class="hljs-built_in">this</span>.goods.push(&#123;<span class="hljs-attr">price</span>: <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-attr">init</span>: <span class="hljs-literal">false</span>, <span class="hljs-attr">clear</span>: <span class="hljs-literal">false</span>&#125;)</span><br><span class="javascript"><span class="hljs-keyword">var</span> currentIndex = <span class="hljs-built_in">this</span>.goods.length - <span class="hljs-number">1</span></span><br><span class="javascript"><span class="hljs-keyword">if</span> (currentIndex &gt; <span class="hljs-number">0</span>) &#123;</span><br><span class="javascript"><span class="hljs-built_in">this</span>.goods[currentIndex-<span class="hljs-number">1</span>].clear = <span class="hljs-literal">true</span></span><br><span class="javascript">&#125;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">var</span> record = <span class="hljs-built_in">this</span>.records.pop()</span><br><span class="javascript"><span class="hljs-built_in">this</span>.balance = record.balance</span><br><span class="javascript"><span class="hljs-built_in">this</span>.coin = record.coin</span><br><span class="javascript"><span class="hljs-built_in">this</span>.realBalance = calRealBalance(<span class="hljs-built_in">this</span>.balance, <span class="hljs-built_in">this</span>.coin)</span><br><span class="javascript"><span class="hljs-built_in">this</span>.msg2 = <span class="hljs-literal">false</span></span><br><span class="javascript"><span class="hljs-built_in">this</span>.cannotBuy = <span class="hljs-literal">false</span></span><br><span class="javascript">&#125;</span><br><span class="javascript">&#125;</span><br><span class="javascript">&#125;)</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>最后，NS sports 真的好好玩哦，我手臂已经疼得抬不起来了~~~</p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>js</tag>
      
      <tag>vue</tag>
      
      <tag>element</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Fortify漏洞一窥</title>
    <link href="/2022/05/04/Fortify%E6%BC%8F%E6%B4%9E%E4%B8%80%E7%AA%A5/"/>
    <url>/2022/05/04/Fortify%E6%BC%8F%E6%B4%9E%E4%B8%80%E7%AA%A5/</url>
    
    <content type="html"><![CDATA[<h2 id="Path-Manipulation"><a href="#Path-Manipulation" class="headerlink" title="Path Manipulation"></a>Path Manipulation</h2><h4 id="解释："><a href="#解释：" class="headerlink" title="解释："></a>解释：</h4><p>当满足以下两个条件时，就会产生 path manipulation 错误：</p><ol><li><p>攻击者可以指定某一文件系统操作中所使用的路径。</p></li><li><p>攻击者可以通过指定特定资源来获取某种权限，而这种权限在一般情况下是不可能获得的。</p></li></ol><p>例如，在某一程序中，攻击者可以获得特定的权限，以重写指定的文件或是在其控制的配置环境下运行程序。</p><p><strong>例 1</strong>： 下面的代码使用来自于 HTTP 请求的输入来创建一个文件名。程序员没有考虑到攻击者可能使用像“**../../**tomcat/conf/server.xml”一样的文件名，从而导致应用程序删除它自己的配置文件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">String rName = request.getParameter(<span class="hljs-string">&quot;reportName&quot;</span>);<br><br>File rFile = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;/usr/local/apfr/reports/&quot;</span> + rName);<br><br>...<br><br>rFile.delete()<br></code></pre></td></tr></table></figure><p><strong>例 2</strong>：下面的代码使用来自于配置文件的输入来决定打开哪个文件，并返回给用户。如果程序在一定的权限下运行，<strong>且恶意用户能够篡改配置文件</strong>，那么他们可以通过程序读取系统中以 .txt 扩展名结尾的所有文件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">fis = <span class="hljs-keyword">new</span> FileInputStream(cfg.getProperty(<span class="hljs-string">&quot;sub&quot;</span>) + <span class="hljs-string">&quot;.txt&quot;</span>);<br>amt = fis.read(arr);<br>out.println(arr);<br></code></pre></td></tr></table></figure><h4 id="建议："><a href="#建议：" class="headerlink" title="建议："></a>建议：</h4><p><strong>方案一：</strong>创建一份<strong>合法资源名的列表</strong>，并且规定用户只能选择其中的文件名。通过这种方法，用户就不能直接由自己来指定资源的名称了。 </p><p>但在某些情况下，这种方法并不可行，因为这样一份合法资源名的列表过于庞大、难以跟踪。因此，程序员通常在这种情况下采用方案二，<strong>黑名单+白名单</strong> 双重过滤路径的办法。</p><p><strong>方案二：</strong>在输入之前，黑名单会有选择地拒绝或避免潜在的危险字符（例如过滤**..**字符）。同时创建一份白名单，允许其中的字符出现在资源名称中，且只接受完全由这些被认可的字符组成的输入。</p><p>Try to normalize the URL before using it</p><p><a href="https://docs.oracle.com/javase/7/docs/api/java/net/URI.html#normalize()">https://docs.oracle.com/javase/7/docs/api/java/net/URI.html#normalize()</a></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">Path</span> <span class="hljs-keyword">path</span> = Paths.<span class="hljs-keyword">get</span>(&quot;/foo/../bar/../baz&quot;).normalize();<br></code></pre></td></tr></table></figure><p>or use normalize from <em>org.apache.commons.io.FilenameUtils</em></p><p><a href="https://commons.apache.org/proper/commons-io/javadocs/api-1.4/org/apache/commons/io/FilenameUtils.html#normalize(java.lang.String)">https://commons.apache.org/proper/commons-io/javadocs/api-1.4/org/apache/commons/io/FilenameUtils.html#normalize(java.lang.String)</a></p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">Stirng path = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">FilenameUtils</span>.</span></span>normalize(<span class="hljs-string">&quot;/foo/../bar/../baz&quot;</span>);<br></code></pre></td></tr></table></figure><p>For both the result will be <code>\baz</code></p><h2 id="Race-Condition-Singleton-MemberField"><a href="#Race-Condition-Singleton-MemberField" class="headerlink" title="Race Condition: Singleton MemberField"></a>Race Condition: Singleton MemberField</h2><p>Servlet 成员字段可能允许一个用户查看其他用户的数据。</p><h4 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h4><p>许多 Servlet 开发人员都不了解 Servlet 为单例模式。 Servlet 只有一个实例，并通过使用和重复使用该单个实例来处理需要由不同线程同时处理的多个请求。 这种误解的共同后果是，开发者使用 Servlet 成员字段的这种方式会导致某个用户可能在无意中看到其他用户的数据。 换言之，即把用户数据存储在 Servlet 成员字段中会引发数据访问的 race condition。<br>例 1： 以下 Servlet 把请求参数值存储在成员字段中，然后将参数值返回给响应输出流。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GuestBook</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    String name;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span> <span class="hljs-params">(HttpServletRequest req, HttpServletResponse res)</span> </span>&#123;<br>        name = req.getParameter(<span class="hljs-string">&quot;name&quot;</span>);<br>        ...<br>        out.println(name + <span class="hljs-string">&quot;, thanks for visiting!&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>当该代码在单一用户环境中正常运行时，如果有两个用户几乎同时访问 Servlet，可能会导致这两个请求以如下方式处理线程的插入：<br>线程 1： assign “Dick” to name<br>线程 2： assign “Jane” to name<br>线程 1： print “Jane, thanks for visiting!”<br>线程 2： print “Jane, thanks for visiting!”<br>因此会向第一个用户显示第二个用户的用户名。</p><h4 id="建议"><a href="#建议" class="headerlink" title="建议"></a>建议</h4><p>不要为任何参数（常量除外）使用 Servlet 成员字段。 （例如，确保所有成员字段都是 static final）。当开发者需要把代码内某一部分中的数据传输到另一部分时，他们经常使用 Servlet 成员字段存储用户数据。 如果您也是这么做的，可以考虑声明一个单独的类，并仅使用 Servlet “封装”这个新类。<br>例 2： 上述例子中的 bug 可以利用以下方式进行修正：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GuestBook</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span> <span class="hljs-params">(HttpServletRequest req, HttpServletResponse res)</span> </span>&#123;<br>        GBRequestHandler handler = <span class="hljs-keyword">new</span> GBRequestHandler();<br>        handler.handle(req, res);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GBRequestHandler</span> </span>&#123;<br>    String name;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">handle</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse res)</span> </span>&#123;<br>        name = req.getParameter(<span class="hljs-string">&quot;name&quot;</span>);<br>        ...<br>        out.println(name + <span class="hljs-string">&quot;, thanks for visiting!&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>此外， Servlet 也可以利用同步代码块来访问 servlet 实例变量。但是，使用同步代码块可能会导致严重的性能问题。</p><h2 id="Command-Injection"><a href="#Command-Injection" class="headerlink" title="Command Injection"></a>Command Injection</h2><p>执行不可信赖资源中的命令，或在不可信赖的环境中执行命令，都会导致程序以攻击者的名义执行恶意命令。</p><h4 id="解释-1"><a href="#解释-1" class="headerlink" title="解释"></a>解释</h4><p>Command Injection 漏洞主要表现为以下两种形式：</p><p>－ 攻击者能够篡改程序执行的命令：攻击者直接控制了所执行的命令。</p><p>－ 攻击者能够篡改命令的执行环境：攻击者间接地控制了所执行的命令。</p><p>在这种情况下，我们着重关注第一种情况，即攻击者有可能控制所执行命令。这种类型的 Command Injection 漏洞会在以下情况下出现：</p><p>\1. 数据从不可信赖的数据源进入应用程序。</p><p>\2. 数据被用作代表应用程序所执行命令的字符串，或字符串的一部分。</p><p>\3. 通过命令的执行，应用程序会授予攻击者一种原本不该拥有的特权或能力。</p><p><strong>例 1：</strong>下面这段来自系统实用程序的代码根据系统属性 <code>APPHOME</code> 来决定其安装目录，然后根据指定目录的相对路径执行一个初始化脚本。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">...<br>String home = System.getProperty(<span class="hljs-string">&quot;APPHOME&quot;</span>);<br>String cmd = home + INITCMD;<br>java.lang.Runtime.getRuntime().exec(cmd);<br>...<br></code></pre></td></tr></table></figure><p><code>Example 1</code> 中的代码可以使攻击者通过修改系统属性 <code>APPHOME</code> 以指向包含恶意版本 <code>INITCMD</code> 的其他路径来提高自己在应用程序中的权限，继而随心所欲地执行命令。由于程序不会验证从环境中读取的值，因此如果攻击者能够控制系统属性 <code>APPHOME</code> 的值，他们就能欺骗应用程序去运行恶意代码，从而取得系统控制权。</p><p><strong>例 2：</strong>下面的代码来自一个管理 Web 应用程序，旨在使用户能够使用一个围绕 <code>rman</code> 实用程序的批处理文件封装器来启动 Oracle 数据库备份，然后运行一个 <code>cleanup.bat</code> 脚本来删除一些临时文件。脚本 <code>rmanDB.bat</code> 接受单个命令行参数，该参数指定了要执行的备份类型。由于访问数据库受限，所以应用程序执行备份需要具有较高权限的用户。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">...<br>String btype = request.getParameter(<span class="hljs-string">&quot;backuptype&quot;</span>);<br>String cmd = <span class="hljs-keyword">new</span> String(<span class="hljs-string">&quot;cmd.exe /K</span><br><span class="hljs-string">\&quot;c:\\util\\rmanDB.bat &quot;</span>+btype+<span class="hljs-string">&quot;&amp;&amp;c:\\util\\cleanup.bat\&quot;&quot;</span>)<br>System.Runtime.getRuntime().exec(cmd);<br>...<br></code></pre></td></tr></table></figure><p>这里的问题是：程序没有对读取自用户的 <code>backuptype</code>参数进行任何验证。通常情况下 <code>Runtime.exec()</code> 函数不会执行多条命令，但在这种情况下，程序会首先运行 <code>cmd.exe</code> shell，从而可以通过调用一次 <code>Runtime.exec()</code> 来执行多条命令。在调用该 shell 之后，它即会允许执行用两个与号分隔的多条命令。如果攻击者传递了一个形式为 <code>&quot;&amp;&amp; del c:\\dbms\\*.*&quot;</code> 的字符串，那么应用程序将随程序指定的其他命令一起执行此命令。由于该应用程序的特性，运行该应用程序需要具备与数据库进行交互所需的权限，这就意味着攻击者注入的任何命令都将通过这些权限得以运行。</p><p><strong>示例 3：</strong>下面的代码来自一个 Web 应用程序，用户可通过该应用程序提供的界面在系统上更新他们的密码。在某些网络环境中更新密码时，其中的一个步骤就是在 <code>/var/yp</code> 目录中运行 <code>make</code> 命令。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">...<br>System.Runtime.getRuntime().exec(<span class="hljs-string">&quot;make&quot;</span>);<br>...<br></code></pre></td></tr></table></figure><p>这里的问题在于程序没有在它的构造中指定一个绝对路径，并且没能在执行 <code>Runtime.exec()</code> 调用前清除它的环境变量。如果攻击者能够修改 <code>$PATH</code> 变量，把它指向名为 <code>make</code> 恶意二进制代码，程序就会在其指定的环境下执行，然后加载该恶意二进制代码，而非原本期望的代码。由于应用程序自身的特性，运行该应用程序需要具备执行系统操作所需的权限，这意味着攻击者会利用这些权限执行自己的 <code>make</code>，从而可能导致攻击者完全控制系统。</p><p>有些人认为在移动世界中，典型的漏洞（如 Command Injection）是无意义的 – 为什么用户要攻击自己？但是，谨记移动平台的本质是从各种来源下载并在相同设备上运行的应用程序。恶意软件在银行应用程序附近运行的可能性很高，它们会强制扩展移动应用程序的攻击面（包括跨进程通信）。</p><p><strong>例 4：</strong>以下代码可从 Android Intent 中读取要执行的命令。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">...<br>        String[] cmds = <span class="hljs-keyword">this</span>.getIntent().getStringArrayExtra(<span class="hljs-string">&quot;commands&quot;</span>);<br>Process p = Runtime.getRuntime().exec(<span class="hljs-string">&quot;su&quot;</span>);<br>        DataOutputStream os = <span class="hljs-keyword">new</span> DataOutputStream(p.getOutputStream());<br>        <span class="hljs-keyword">for</span> (String cmd : cmds) &#123;<br>        os.writeBytes(cmd+<span class="hljs-string">&quot;\n&quot;</span>);<br>        &#125;<br>        os.writeBytes(<span class="hljs-string">&quot;exit\n&quot;</span>);<br>        os.flush();<br>...<br></code></pre></td></tr></table></figure><p>在经过 root 的设备上，恶意应用程序会强迫受攻击应用程序使用超级用户权限执行任意命令。</p><h4 id="建议-1"><a href="#建议-1" class="headerlink" title="建议"></a>建议</h4><p>应当禁止用户直接控制由程序执行的命令。 在用户的输入会影响命令执行的情况下，应将用户输入限制为从预定的安全命令集合中进行选择。 如果输入中出现了恶意的内容，传递到命令执行函数的值将默认从安全命令集合中选择，或者程序将拒绝执行任何命令。</p><p> 在需要将用户的输入用作程序命令中的参数时，由于合法的参数集合实在很大，或是难以跟踪，使得这个方法通常都不切实际。 开发者通常的做法是使用黑名单。 在输入之前，黑名单会有选择地拒绝或避免潜在的危险字符。 </p><p>但是，任何一个定义不安全内容的列表都很可能是不完整的，并且会严重地依赖于执行命令的环境。 较好的方法是创建一份白名单，允许其中的字符出现在输入中，并且只接受完全由这些经认可的字符组成的输入。 </p><p>攻击者可以通过修改程序运行命令的环境来间接控制这些命令的执行。 我们不应当完全信赖环境，还需采取预防措施，防止攻击者利用某些控制环境的手段进行攻击。 无论何时，只要有可能，都应由应用程序来控制命令，并使用绝对路径执行命令。 如果编译时尚不了解路径（如在跨平台应用程序中），应该在执行过程中利用可信赖的值构建一个绝对路径。 应对照一系列定义有效值的常量，仔细地检查从配置文件或者环境中读取的命令值和路径。 </p><p>有时还可以执行其他检验，以检查这些来源是否已被恶意篡改。 例如，如果一个配置文件为可写，程序可能会拒绝运行。 如果能够预先得知有关要执行的二进制代码的信息，程序就会进行检测，以检验这个二进制代码的合法性。 如果一个二进制代码始终属于某个特定的用户，或者被指定了一组特定的访问权限，这些属性就会在执行二进制代码前通过程序进行检验。 尽管可能无法完全阻止强大的攻击者为了控制程序执行的命令而对系统进行的攻击，但只要程序执行外部命令，就务必使用最小授权原则： 不给予超过执行该命令所必需的权限。</p><h2 id="Cross-Site-Scripting-Content-Sniffing"><a href="#Cross-Site-Scripting-Content-Sniffing" class="headerlink" title="Cross-Site Scripting: Content Sniffing"></a>Cross-Site Scripting: Content Sniffing</h2><p>向 Web 浏览器发送未经验证的数据可能导致某些浏览器执行恶意代码。</p><h4 id="解释-2"><a href="#解释-2" class="headerlink" title="解释"></a>解释</h4><p>Cross-Site Scripting (XSS) 漏洞会在以下情况下出现：</p><p>1.数据通过一个不可信赖的数据源进入 Web 应用程序。对于 Reflected XSS，不可信赖的数据源通常为 Web 请求，而对于 Persisted（也称为 Stored）XSS，该数据源通常为数据库或其他后端数据存储。</p><p>2.未经验证但包含在动态内容中的数据将传送给 Web 用户。</p><p>传送到 Web 浏览器的恶意内容通常采用 JavaScript 片段的形式，但也可能会包含一些 HTML、Flash 或者其他任意一种可以被浏览器执行的代码。基于 XSS 的攻击手段花样百出，几乎是无穷无尽的，但通常它们都会包含传输给攻击者的私有数据（如 Cookie 或者其他会话信息）。在攻击者的控制下，指引受害者进入恶意的网络内容；或者利用易受攻击的站点，对用户的机器进行其他恶意操作。</p><p>为了让浏览器将响应呈现为 HTML 或者可执行脚本的其他文档，必须指定<code>text/html</code>MIME 类型。因此，仅当响应使用此 MIME 类型或者使用的任何其他类型同样强制浏览器将响应呈现为 HTML 或可执行 SVG 图像 (<code>image/svg+xml</code>) 和 XML 文档 (<code>application/xml</code>) 等脚本的其他文档时，才有可能使用 XSS。</p><p>大多数现代浏览器不会呈现 HTML，也不会在为响应提供<code>application/json</code>等 MIME 类型时执行脚本。但是，Internet Explorer 等某些浏览器可执行称为<code>Content Sniffing</code>的内容。Content Sniffing 涉及到忽略提供的 MIME 类型并尝试根据响应的内容推断正确的 MIME 类型。<br>但是，值得注意的是，MIME 类型的<code>text/html</code>是可能导致 XSS 漏洞的唯一 MIME 类型。可执行 SVG 图像 (<code>image/svg+xml</code>) 和 XML 文档 (<code>application/xml</code>) 等脚本的其他文档可能导致 XSS 漏洞，无论浏览器是否执行 Content Sniffing 都是如此。</p><p>因此，<code>&lt;html&gt;&lt;body&gt;&lt;script&gt;alert(1)&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code>等响应可能呈现为 HTML，即使其 <code>content-type</code> 标头设置为 <code>application/json</code> 也是如此。</p><p><strong>示例 1：</strong>以下 JAX-RS 方法反映 <code>application/json</code>响应中的用户数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Path(&quot;/myResource&quot;)</span><br><span class="hljs-meta">@Produces(&quot;application/json&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SomeResource</span> </span>&#123;<br><span class="hljs-meta">@GET</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">doGetAsJson</span><span class="hljs-params">(<span class="hljs-meta">@QueryParam(&quot;param&quot;)</span> String param)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&#123;&#x27;name&#x27;: &#x27;&quot;</span> + param + <span class="hljs-string">&quot;&#x27;&#125;&quot;</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果攻击者所发送请求的 <code>name</code>参数设置为 <code>&lt;html&gt;&lt;body&gt;&lt;script&gt;alert(1)&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code>，则服务器将生成以下响应：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-meta">HTTP/1.1</span> <span class="hljs-number">200</span> OK<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>88<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/json<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>Closed<br><br><span class="xml">&#123;&#x27;name&#x27;: &#x27;<span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span>alert(1)<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span>&#x27;&#125;</span><br></code></pre></td></tr></table></figure><p>尽管响应明确声明应该将其视为 JSON 文档，但旧浏览器仍可能尝试将其呈现为 HTML 文档，使其容易受到 Cross-Site Scripting 攻击。</p><h4 id="建议-2"><a href="#建议-2" class="headerlink" title="建议"></a>建议</h4><p>所以根据XSS漏洞产生的原因，对于XSS脚本攻击的漏洞修复，主要解决方案是：</p><p>a、对输入源进行校验和过滤；</p><p>b、对输出源进行校验和过滤； </p><p><strong>例：</strong></p><p>提供公共方法，结合实际业务需求，对输入源和输出源调用该方法进行特殊字符的过滤，主要是浏览器脚本可能包含的一些特殊字符。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">filterInput</span><span class="hljs-params">(String input)</span> </span>&#123;<br>    List&lt;String&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>    list.add(<span class="hljs-string">&quot;&lt;&quot;</span>);<br>    list.add(<span class="hljs-string">&quot;&gt;&quot;</span>);<br>    list.add(<span class="hljs-string">&quot;(&quot;</span>);<br>    list.add(<span class="hljs-string">&quot;)&quot;</span>);<br>    list.add(<span class="hljs-string">&quot;&amp;&quot;</span>);<br>    list.add(<span class="hljs-string">&quot;?&quot;</span>);<br>    list.add(<span class="hljs-string">&quot;;&quot;</span>);<br>    String encode = Normalizer.normalize(input, Normalizer.Form.NFKC);<br>    <span class="hljs-keyword">for</span> (String s : list) &#123;<br>        encode = encode.replace(s, <span class="hljs-string">&quot;&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> encode;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Often-Misused-File-Upload"><a href="#Often-Misused-File-Upload" class="headerlink" title="Often Misused: File Upload"></a>Often Misused: File Upload</h2><p>允许用户上传文件可能导致攻击者注入危险内容或恶意代码以便在服务器上运行。</p><h4 id="解释-3"><a href="#解释-3" class="headerlink" title="解释"></a>解释</h4><p>无论编写程序所用的语言是什么，最具破坏性的攻击通常都会涉及执行远程代码，攻击者借此可在程序上下文中成功执行恶意代码。如果允许攻击者向某个可通过 Web 访问的目录上传文件，并能够将这些文件传递给代码解释器（如 JSP/ASPX/PHP），他们就能促使这些文件中包含的恶意代码在服务器上执行。</p><p><strong>示例：</strong>以下 Spring MVC 控制器类包含可用于处理上传文件的参数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyFormController</span> </span>&#123;<br>    ...<br>    <span class="hljs-meta">@RequestMapping(&quot;/test&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">uploadFile</span> <span class="hljs-params">(org.springframework.web.multipart.MultipartFile file)</span> </span>&#123;<br>       ...<br>    &#125;    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>即使程序将上传的文件存储在一个无法通过 Web 访问的目录中，攻击者仍然有可能通过向服务器环境引入恶意内容来发动其他攻击。如果程序容易出现 path manipulation、command injection 或危险的 file inclusion 漏洞，那么攻击者就可能上传带恶意内容的文件，并利用另一种漏洞促使程序读取或执行该文件。</p><h4 id="建议-3"><a href="#建议-3" class="headerlink" title="建议"></a>建议</h4><p>对上传文件做好校验：</p><ol><li>文件类型，做好类型白名单，通过文件头来判断类型</li><li>文件大小，不同业务做不同限制</li><li>压缩文件，要提防zip炸弹</li></ol><h2 id="Resource-Injection"><a href="#Resource-Injection" class="headerlink" title="Resource Injection"></a>Resource Injection</h2><p>使用用户输入控制资源标识符，借此攻击者可以访问或修改其他受保护的系统资源。</p><h4 id="解释-4"><a href="#解释-4" class="headerlink" title="解释"></a>解释</h4><p>当满足以下两个条件时，就会发生 resource injection：</p><p>\1. 攻击者可以指定已使用的标识符来访问系统资源。</p><p>例如，攻击者可能可以指定用来连接到网络资源的端口号。</p><p>\2. 攻击者可以通过指定特定资源来获取某种权限，而这种权限在一般情况下是不可能获得的。</p><p>例如，程序可能会允许攻击者把敏感信息传输到第三方服务器。</p><p>资源注入攻击与<a href="https://owasp.org/www-community/attacks/Path_Manipulation">路径操纵</a>不同，因为资源注入侧重于访问本地文件系统以外的资源，而 <a href="https://owasp.org/www-community/attacks/Path_Manipulation">路径操纵</a>侧重于访问本地文件系统。</p><p><strong>示例 1：</strong>下面的代码使用读取自 HTTP 请求的端口号来建立一个套接字。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">String remotePort = request.getParameter(<span class="hljs-string">&quot;remotePort&quot;</span>);<br>...<br>ServerSocket srvr = <span class="hljs-keyword">new</span> ServerSocket(remotePort);<br>Socket skt = srvr.accept();<br>...<br></code></pre></td></tr></table></figure><p>有些人认为在移动世界中，典型的 Web 应用程序漏洞（如 resource injection）是无意义的 – 为什么用户要攻击自己？但是，谨记移动平台的本质是从各种来源下载并在相同设备上运行的应用程序。恶意软件在银行应用程序附近运行的可能性很高，它们会强制扩展移动应用程序的攻击面（包括跨进程通信）。</p><p><strong>示例 2：</strong>下面的代码使用读取自 Android Intent 的 URL 在 <code>WebView</code> 中加载页面。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">...<br>WebView webview = <span class="hljs-keyword">new</span> WebView(<span class="hljs-keyword">this</span>);<br>setContentView(webview);<br>    String url = <span class="hljs-keyword">this</span>.getIntent().getExtras().getString(<span class="hljs-string">&quot;url&quot;</span>);<br>webview.loadUrl(url);<br>...<br></code></pre></td></tr></table></figure><p>这种受用户输入影响的资源表明其中的内容可能存在危险。例如，包含如句点、斜杠和反斜杠等特殊字符的数据在与 file system 相作用的方法中使用时，具有很大风险。类似的，对于创建远程结点的函数来说，包含 URL 和 URI 的数据也具有很大风险。</p><h2 id="Formula-Injection"><a href="#Formula-Injection" class="headerlink" title="Formula Injection"></a>Formula Injection</h2><p>攻击者可能会控制写入到电子表格的数据，借此让用户打开某些电子表格处理器上的文件。</p><h4 id="解释-5"><a href="#解释-5" class="headerlink" title="解释"></a>解释</h4><p>常用电子表格处理器（如 Apache OpenOffice Calc 和 Microsoft Office Excel）支持的公式运算非常强大，这可能会使攻击者控制电子表格而在底层系统上运行任意命令或在电子表格上泄漏敏感信息。</p><p>例如，攻击者可能会将以下有效负载作为 CSV 字段的一部分注入：<code>=cmd|&#39;/C calc.exe&#39;!Z0</code>。如果打开电子表格的用户信任文档来源，他们可能就会接受电子表格处理器提供的所有安全提示信息，并使此有效负载（此处为打开 Windows 计算器）在其系统上运行。</p><p><strong>示例：</strong>以下示例展示了使用未经检查的用户控制数据生成 CSV 响应的 Spring 控制器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &quot;/api/service.csv&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> ResponseEntity&lt;String&gt; <span class="hljs-title">service</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;name&quot;)</span> String name)</span> </span>&#123;<br><br>    HttpHeaders responseHeaders = <span class="hljs-keyword">new</span> HttpHeaders();<br>    responseHeaders.add(<span class="hljs-string">&quot;Content-Type&quot;</span>, <span class="hljs-string">&quot;application/csv; charset=utf-8&quot;</span>);<br>    responseHeaders.add(<span class="hljs-string">&quot;Content-Disposition&quot;</span>, <span class="hljs-string">&quot;attachment;filename=file.csv&quot;</span>);<br><br>    String data = generateCSVFor(name);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ResponseEntity&lt;&gt;(data, responseHeaders, HttpStatus.OK);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="附"><a href="#附" class="headerlink" title="附"></a>附</h2><p>fortify源代码扫描问题分析汇总：<a href="https://blog.csdn.net/weixin_39997829/article/details/118970901">https://blog.csdn.net/weixin_39997829/article/details/118970901</a></p>]]></content>
    
    
    <categories>
      
      <category>安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>安全</tag>
      
      <tag>漏洞</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mybatis逆向工程</title>
    <link href="/2022/03/06/mybatis%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/"/>
    <url>/2022/03/06/mybatis%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="pom依赖"><a href="#pom依赖" class="headerlink" title="pom依赖"></a>pom依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>cn.th<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-generator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!-- 使用插件无需专门引入以下依赖--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.4.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.generator<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-generator-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.4.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 使用插件进行逆向工程--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.generator<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.4.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-comment">&lt;!-- 指明插件连接数据库所需要的jdbc --&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.21<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">configurationFile</span>&gt;</span><br>                        $&#123;basedir&#125;/src/main/resources/generatorConfig.xml<br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">configurationFile</span>&gt;</span><br>                    <span class="hljs-comment">&lt;!-- 重复生成时会覆盖之前的文件,否则可能生成多个同名文件 --&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">overwrite</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">overwrite</span>&gt;</span><br>                    <span class="hljs-comment">&lt;!-- 在控制台打印执行日志 --&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">verbose</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">verbose</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="properties配置"><a href="#properties配置" class="headerlink" title="properties配置"></a>properties配置</h2><p>除了可以配置 jdbc，指定 jdbc jar 包位置外，还可以配置一些动态参数，例如生成文件存放的包名之类。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-meta">jdbc.driver</span>=<span class="hljs-string">com.mysql.jdbc.Driver</span><br><span class="hljs-meta">jdbc.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/mhgu</span><br><span class="hljs-meta">jdbc.username</span>=<span class="hljs-string">root</span><br><span class="hljs-meta">jdbc.password</span>=<span class="hljs-string">password</span><br><span class="hljs-attr">jdbc_driver_location</span>=<span class="hljs-string">E:/maven/repository/mysql/mysql-connector-java/5.1.21/mysql-connector-java-5.1.21.jar</span><br></code></pre></td></tr></table></figure><h2 id="generator-xml-配置"><a href="#generator-xml-配置" class="headerlink" title="generator.xml 配置"></a>generator.xml 配置</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">generatorConfiguration</span></span><br><span class="hljs-meta">        <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">generatorConfiguration</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 引入配置文件 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;generatorConfig.properties&quot;</span>/&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- jdbc jar 包位置 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 若pom引入插件时指定了jdbc，此处可省略--&gt;</span><br>   <span class="hljs-comment">&lt;!--  &lt;classPathEntry location=&quot;$&#123;jdbc_driver_location&#125;&quot; /&gt; --&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;DB2Tables&quot;</span> <span class="hljs-attr">targetRuntime</span>=<span class="hljs-string">&quot;MyBatis3&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">commentGenerator</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;suppressDate&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>            <span class="hljs-comment">&lt;!-- 是否去除自动生成的注释 true：是 ： false:否 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;suppressAllComments&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">commentGenerator</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!--数据库连接参数 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">jdbcConnection</span></span><br><span class="hljs-tag">                <span class="hljs-attr">driverClass</span>=<span class="hljs-string">&quot;$&#123;jdbc.driver&#125;&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">connectionURL</span>=<span class="hljs-string">&quot;$&#123;jdbc.url&#125;&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">userId</span>=<span class="hljs-string">&quot;$&#123;jdbc.username&#125;&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">password</span>=<span class="hljs-string">&quot;$&#123;jdbc.password&#125;&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">jdbcConnection</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 默认false，把JDBC DECIMAL 和 NUMERIC 类型解析为 Integer，为 true时把JDBC DECIMAL 和NUMERIC 类型解析为java.math.BigDecimal --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">javaTypeResolver</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;forceBigDecimals&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">javaTypeResolver</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- 实体类的包名和存放路径 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">javaModelGenerator</span> <span class="hljs-attr">targetPackage</span>=<span class="hljs-string">&quot;cn.th.dao.model&quot;</span> <span class="hljs-attr">targetProject</span>=<span class="hljs-string">&quot;src/main/java&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- enableSubPackages:是否让schema作为包的后缀 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;enableSubPackages&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span><br>            <span class="hljs-comment">&lt;!-- 清理数据库返回的值前后的空格 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;trimStrings&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">javaModelGenerator</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- 生成映射文件*.xml的位置--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">sqlMapGenerator</span> <span class="hljs-attr">targetPackage</span>=<span class="hljs-string">&quot;cn.th.dao.mapper&quot;</span> <span class="hljs-attr">targetProject</span>=<span class="hljs-string">&quot;src/main/resources&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;enableSubPackages&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">sqlMapGenerator</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- 生成DAO的包名和位置 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">javaClientGenerator</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;XMLMAPPER&quot;</span> <span class="hljs-attr">targetPackage</span>=<span class="hljs-string">&quot;cn.th.dao.mapper&quot;</span> <span class="hljs-attr">targetProject</span>=<span class="hljs-string">&quot;src/main/java&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;enableSubPackages&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">javaClientGenerator</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- tableName：数据库中的表名或视图名；domainObjectName：生成的实体类的类名--&gt;</span><br>        <span class="hljs-comment">&lt;!-- enableCountByExample=&quot;false&quot; enableUpdateByExample=&quot;false&quot; enableDeleteByExample=&quot;false&quot; enableSelectByExample=&quot;false&quot;  selectByExampleQueryId=&quot;false&quot;--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">domainObjectName</span>=<span class="hljs-string">&quot;Gmap&quot;</span> <span class="hljs-attr">tableName</span>=<span class="hljs-string">&quot;game_map&quot;</span> <span class="hljs-attr">enableCountByExample</span>=<span class="hljs-string">&quot;false&quot;</span> <span class="hljs-attr">enableUpdateByExample</span>=<span class="hljs-string">&quot;false&quot;</span> <span class="hljs-attr">enableDeleteByExample</span>=<span class="hljs-string">&quot;false&quot;</span> <span class="hljs-attr">enableSelectByExample</span>=<span class="hljs-string">&quot;false&quot;</span>  <span class="hljs-attr">selectByExampleQueryId</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">context</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">generatorConfiguration</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="java代码读取xml配置运行"><a href="#java代码读取xml配置运行" class="headerlink" title="java代码读取xml配置运行"></a>java代码读取xml配置运行</h2><p>IDEA 做完以上3个配置就可以直接使用 maven 插件进行 DAO 层文件生成。若想用 java 代码来实现，则需要 mybatis-generator-core （pom文件中引入，见上）和 jdbc （generator.xml中 配置，见上） 的 jar 包。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.mybatis.generator.api.MyBatisGenerator;<br><span class="hljs-keyword">import</span> org.mybatis.generator.config.Configuration;<br><span class="hljs-keyword">import</span> org.mybatis.generator.config.xml.ConfigurationParser;<br><span class="hljs-keyword">import</span> org.mybatis.generator.internal.DefaultShellCallback;<br><br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Generator</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception</span>&#123;<br>        List&lt;String&gt; warnings = <span class="hljs-keyword">new</span> ArrayList&lt;String&gt;();<br>        <span class="hljs-keyword">boolean</span> overwrite = <span class="hljs-keyword">true</span>;<br>        File configFile = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;F:\\Users\\Nova\\mybatis-generator\\src\\main\\resources\\generatorConfig.xml&quot;</span>);<br>        ConfigurationParser cp = <span class="hljs-keyword">new</span> ConfigurationParser(warnings);<br>        Configuration config = cp.parseConfiguration(configFile);<br>        DefaultShellCallback callback = <span class="hljs-keyword">new</span> DefaultShellCallback(overwrite);<br>        MyBatisGenerator myBatisGenerator = <span class="hljs-keyword">new</span> MyBatisGenerator(config, callback, warnings);<br>        myBatisGenerator.generate(<span class="hljs-keyword">null</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>mybatis</tag>
      
      <tag>maven</tag>
      
      <tag>数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>统计git提交代码行数</title>
    <link href="/2022/02/20/%E7%BB%9F%E8%AE%A1git%E6%8F%90%E4%BA%A4%E4%BB%A3%E7%A0%81%E8%A1%8C%E6%95%B0/"/>
    <url>/2022/02/20/%E7%BB%9F%E8%AE%A1git%E6%8F%90%E4%BA%A4%E4%BB%A3%E7%A0%81%E8%A1%8C%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="git相关命令"><a href="#git相关命令" class="headerlink" title="git相关命令"></a>git相关命令</h2><p>git 查询某时间段内代码提交行数（含增、删）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">log</span> --pretty=tformat: --numstat --author=Nova --since=2021-01-01 --until=2022-01-31 | awk <span class="hljs-string">&#x27;&#123;add += $1; subs += $2&#125; END &#123;printf &quot;added lines: %s, removed lines: %s&quot;, add, subs&#125;&#x27;</span><br></code></pre></td></tr></table></figure><p><code>git log</code> 的常用选项</p><table><thead><tr><th align="left">选项</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"><code>-p</code></td><td align="left">按补丁格式显示每个提交引入的差异。</td></tr><tr><td align="left"><code>--stat</code></td><td align="left">显示每次提交的文件修改统计信息。</td></tr><tr><td align="left"><code>--shortstat</code></td><td align="left">只显示 –stat 中最后的行数修改添加移除统计。</td></tr><tr><td align="left"><code>--name-only</code></td><td align="left">仅在提交信息后显示已修改的文件清单。</td></tr><tr><td align="left"><code>--name-status</code></td><td align="left">显示新增、修改、删除的文件清单。</td></tr><tr><td align="left"><code>--abbrev-commit</code></td><td align="left">仅显示 SHA-1 校验和所有 40 个字符中的前几个字符。</td></tr><tr><td align="left"><code>--relative-date</code></td><td align="left">使用较短的相对时间而不是完整格式显示日期（比如“2 weeks ago”）。</td></tr><tr><td align="left"><code>--graph</code></td><td align="left">在日志旁以 ASCII 图形显示分支与合并历史。</td></tr><tr><td align="left"><code>--pretty</code></td><td align="left">使用其他格式显示历史提交信息。可用的选项包括 oneline、short、full、fuller 和 format（用来定义自己的格式）。</td></tr><tr><td align="left"><code>--oneline</code></td><td align="left"><code>--pretty=oneline --abbrev-commit</code> 合用的简写。</td></tr></tbody></table><p>定制输出格式，<code>git log --pretty=format</code> 常用的选项</p><table><thead><tr><th align="left">选项</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"><code>%H</code></td><td align="left">提交的完整哈希值</td></tr><tr><td align="left"><code>%h</code></td><td align="left">提交的简写哈希值</td></tr><tr><td align="left"><code>%T</code></td><td align="left">树的完整哈希值</td></tr><tr><td align="left"><code>%t</code></td><td align="left">树的简写哈希值</td></tr><tr><td align="left"><code>%P</code></td><td align="left">父提交的完整哈希值</td></tr><tr><td align="left"><code>%p</code></td><td align="left">父提交的简写哈希值</td></tr><tr><td align="left"><code>%an</code></td><td align="left">作者名字</td></tr><tr><td align="left"><code>%ae</code></td><td align="left">作者的电子邮件地址</td></tr><tr><td align="left"><code>%ad</code></td><td align="left">作者修订日期（可以用 –date=选项 来定制格式）</td></tr><tr><td align="left"><code>%ar</code></td><td align="left">作者修订日期，按多久以前的方式显示</td></tr><tr><td align="left"><code>%cn</code></td><td align="left">提交者的名字</td></tr><tr><td align="left"><code>%ce</code></td><td align="left">提交者的电子邮件地址</td></tr><tr><td align="left"><code>%cd</code></td><td align="left">提交日期</td></tr><tr><td align="left"><code>%cr</code></td><td align="left">提交日期（距今多长时间）</td></tr><tr><td align="left"><code>%s</code></td><td align="left">提交说明</td></tr></tbody></table><p>限制 <code>git log</code> 输出的选项、</p><table><thead><tr><th align="left">选项</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"><code>-&lt;n&gt;</code></td><td align="left">仅显示最近的 n 条提交。</td></tr><tr><td align="left"><code>--since</code>, <code>--after</code></td><td align="left">仅显示指定时间之后的提交。</td></tr><tr><td align="left"><code>--until</code>, <code>--before</code></td><td align="left">仅显示指定时间之前的提交。</td></tr><tr><td align="left"><code>--author</code></td><td align="left">仅显示作者匹配指定字符串的提交。</td></tr><tr><td align="left"><code>--committer</code></td><td align="left">仅显示提交者匹配指定字符串的提交。</td></tr><tr><td align="left"><code>--grep</code></td><td align="left">仅显示提交说明中包含指定字符串的提交。</td></tr><tr><td align="left"><code>-S</code></td><td align="left">仅显示添加或删除内容匹配指定字符串的提交。</td></tr></tbody></table><h2 id="awk相关命令"><a href="#awk相关命令" class="headerlink" title="awk相关命令"></a>awk相关命令</h2><p>awk的基本语法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">awk -F|-f|-v <span class="hljs-string">&#x27;BEGIN&#123; &#125; / / &#123;comand1;comand2&#125; END&#123; &#125;&#x27;</span> file<br>-F 定义列分隔符<br>-f 指定调用脚本<br>-v 定义变量<br><span class="hljs-string">&#x27; &#x27;</span>引用代码块，awk执行语句必须包含在内<br>BEGIN&#123; &#125; 初始化代码块，在对每一行进行处理之前，初始化代码，主要是引用全局变量，设置FS分隔符<br>&#123; &#125; 命令代码块，包含一条或多条命令<br>// 用来定义需要匹配的模式（字符串或者正则表达式），对满足匹配模式的行进行上条代码块的操作<br>END&#123; &#125;  结尾代码块，在对每一行进行处理之后再执行的代码块，主要是进行最终计算或输出结尾摘要信息<br></code></pre></td></tr></table></figure><p>关于字段列表</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;this is a test&#x27;</span> | awk <span class="hljs-string">&#x27;&#123;print $0&#125;&#x27;</span><br>this is a <span class="hljs-built_in">test</span><br></code></pre></td></tr></table></figure><p>上面代码中，print $0就是把标准输入this is a test，重新打印了一遍。</p><p>awk会根据空格和制表符，将每一行分成若干字段，依次用$1、$2、$3代表第一个字段、第二个字段、第三个字段等等。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt;$ <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;this is a test&#x27;</span> | awk <span class="hljs-string">&#x27;&#123;print $3&#125;&#x27;</span><br>a<br></code></pre></td></tr></table></figure><h2 id="shell脚本的编写"><a href="#shell脚本的编写" class="headerlink" title="shell脚本的编写"></a>shell脚本的编写</h2><p>把以上命令封装成脚本，实现作者、工程目录、始末时间、查询提交说明中关键字tag等自由配置的功能</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">### configuration ###</span><br><span class="hljs-comment"># your git name.</span><br>NAME=Nova<br><span class="hljs-comment"># your git project path. eg: WORK_PATH=&quot;F:\Users\Nova\IdeaProjects\mhgu&quot;</span><br>WORK_PATH=<span class="hljs-string">&quot;F:\Users\Nova\IdeaProjects\mhgu&quot;</span><br><span class="hljs-comment"># start time is allowed to be null. eg: begin_time=2021-01-01</span><br>BEGIN_TIME=<br><span class="hljs-comment"># end time is allowed to be null. eg: end_time=2022-04-01</span><br>END_TIME=<br><span class="hljs-comment"># tag is allowed to be null, it will be used to search your commit message. eg: TAG=&quot;Equip Moudle&quot;</span><br>TAG=<br><br><span class="hljs-comment">### ==================== authored by tanghao ==================== ###</span><br>GIT_STR=<span class="hljs-string">&quot;git log --pretty=tformat: --numstat&quot;</span><br>NAME_STR=<span class="hljs-string">&quot;author=<span class="hljs-variable">$&#123;NAME&#125;</span>&quot;</span><br>BEGIN_STR=<span class="hljs-string">&quot;since=<span class="hljs-variable">$&#123;BEGIN_TIME&#125;</span>&quot;</span><br>END_STR=<span class="hljs-string">&quot;until=<span class="hljs-variable">$&#123;END_TIME&#125;</span>&quot;</span><br>GREP_STR=<span class="hljs-string">&quot;grep=<span class="hljs-variable">$&#123;TAG&#125;</span>&quot;</span><br>PARAM_OPERATOR=<span class="hljs-string">&quot;--&quot;</span><br>PIPE_OPERATOR=<span class="hljs-string">&quot;|&quot;</span><br>AWK_STR=<span class="hljs-string">&quot;awk &#x27;&#123;add += \$1; subs += \$2&#125; END &#123;printf \&quot;added lines: %s, removed lines: %s\&quot;, add, subs&#125;&#x27;&quot;</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">GetFinalGitStr</span></span>() &#123;<br>    <span class="hljs-keyword">if</span> [[ -n <span class="hljs-variable">$&#123;NAME&#125;</span> ]]; <span class="hljs-keyword">then</span><br>        GIT_STR=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;GIT_STR&#125;</span> <span class="hljs-variable">$&#123;PARAM_OPERATOR&#125;</span><span class="hljs-variable">$&#123;NAME_STR&#125;</span>&quot;</span><br>    <span class="hljs-keyword">fi</span><br>    <span class="hljs-keyword">if</span> [[ -n <span class="hljs-variable">$&#123;BEGIN_TIME&#125;</span> ]]; <span class="hljs-keyword">then</span><br>        GIT_STR=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;GIT_STR&#125;</span> <span class="hljs-variable">$&#123;PARAM_OPERATOR&#125;</span><span class="hljs-variable">$&#123;BEGIN_STR&#125;</span>&quot;</span><br>    <span class="hljs-keyword">fi</span><br>    <span class="hljs-keyword">if</span> [[ -n <span class="hljs-variable">$&#123;END_TIME&#125;</span> ]]; <span class="hljs-keyword">then</span><br>        GIT_STR=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;GIT_STR&#125;</span> <span class="hljs-variable">$&#123;PARAM_OPERATOR&#125;</span><span class="hljs-variable">$&#123;END_STR&#125;</span>&quot;</span><br>    <span class="hljs-keyword">fi</span><br>    <span class="hljs-keyword">if</span> [[ -n <span class="hljs-variable">$&#123;TAG&#125;</span> ]]; <span class="hljs-keyword">then</span><br>        GIT_STR=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;GIT_STR&#125;</span> <span class="hljs-variable">$&#123;PARAM_OPERATOR&#125;</span><span class="hljs-variable">$&#123;GREP_STR&#125;</span>&quot;</span><br>    <span class="hljs-keyword">fi</span><br>&#125;<br><br><span class="hljs-keyword">if</span> [ -n <span class="hljs-variable">$&#123;WORK_PATH&#125;</span> ]; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">cd</span> <span class="hljs-variable">$&#123;WORK_PATH&#125;</span><br><span class="hljs-keyword">fi</span><br><br>GetFinalGitStr<br>COMMAND=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;GIT_STR&#125;</span> <span class="hljs-variable">$&#123;PIPE_OPERATOR&#125;</span> <span class="hljs-variable">$&#123;AWK_STR&#125;</span>&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;NAME_STR&#125;</span>&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;path=<span class="hljs-variable">$&#123;WORK_PATH&#125;</span>&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;BEGIN_STR&#125;</span>&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;END_STR&#125;</span>&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;tag=<span class="hljs-variable">$&#123;TAG&#125;</span>&quot;</span><br><span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;\n&quot;</span><br><span class="hljs-built_in">eval</span> <span class="hljs-variable">$&#123;COMMAND&#125;</span><br><span class="hljs-built_in">read</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
      <tag>linux</tag>
      
      <tag>shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>从零开始的算法之路04——优先队列</title>
    <link href="/2022/01/12/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84%E7%AE%97%E6%B3%95%E4%B9%8B%E8%B7%AF04%E2%80%94%E2%80%94%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97/"/>
    <url>/2022/01/12/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84%E7%AE%97%E6%B3%95%E4%B9%8B%E8%B7%AF04%E2%80%94%E2%80%94%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97/</url>
    
    <content type="html"><![CDATA[<p>许多应用程序都需要处理有序的元素，但不一定要求他们全部有序，或是不一定要一次就将它们排序。很多情况下我们会收集一些元素，处理当前键值最大的元素，再收集更多的元素，如此循环。例如一台可以运行多个程序电脑，会给每个任务分优先级，并总是处理下一个优先级最高的事件。</p><p>在这种情况下，一个合适的数据结构应该支持两种操作：删除最大元素和插入元素。这种数据类型叫<strong>优先队列</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MaxPQ</span>&lt;<span class="hljs-title">Key</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Comparable</span>&lt;<span class="hljs-title">Key</span>&gt;&gt; </span>&#123;<br>    <span class="hljs-comment">// 创建一个优先队列</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MaxPQ</span><span class="hljs-params">()</span> </span>&#123;&#125;<br><br>    <span class="hljs-comment">// 创建一个初始容量为max的优先队列</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MaxPQ</span><span class="hljs-params">(<span class="hljs-keyword">int</span> max)</span> </span>&#123;&#125;<br><br>    <span class="hljs-comment">// 用a[]中的元素创建一个优先队列</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MaxPQ</span><span class="hljs-params">(Key[] a)</span> </span>&#123;&#125;<br><br>    <span class="hljs-comment">// 向优先队列中插入一个元素</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(Key v)</span> </span>&#123;&#125;<br><br>    <span class="hljs-comment">// 返回最大元素</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Key <span class="hljs-title">max</span><span class="hljs-params">()</span> </span>&#123;&#125;<br><br>    <span class="hljs-comment">// 删除并返回最大元素</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Key <span class="hljs-title">delMax</span><span class="hljs-params">()</span> </span>&#123;&#125;<br><br>    <span class="hljs-comment">// 返回队列是否为空</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isEmpty</span><span class="hljs-params">()</span> </span>&#123;&#125;<br><br>    <span class="hljs-comment">// 返回优先队列中的元素个数</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">size</span><span class="hljs-params">()</span> </span>&#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h2><p>数据结构二叉堆能够很好地实现优先队列地基本操作。在二叉堆的数组中，每个元素都要保证大于等于另外两个特定位置的元素。画成二叉树会很容易理解。</p><p><em>当一棵二叉树地每个结点都大于等于它地两个子结点时，它被称为堆有序。</em></p><p>在堆有序地二叉树中，每个结点都小于等于它地父结点。从任意结点向上，我们都能得到一列非递减的元素。</p><p><em>根结点是堆有序的二叉树中最大的结点。</em></p><p>使用完全二叉树来表达堆有序的二叉树会非常方便，我们只需要用数组（而不需要额外记录父子关系的指针）就可以实现。</p><p>定义：<strong>二叉堆是一组能够用堆有序的完全二叉树排序的元素，并在数组中按照层级存储（不使用数组第一个位置）。</strong></p><p>在一个（二叉）堆中，位置 k 的结点的父结点位置为 k/2 ，而它的两个子结点分别为 2k 和 2k+1。</p><h3 id="辅助函数"><a href="#辅助函数" class="headerlink" title="辅助函数"></a>辅助函数</h3><p>我们依然使用 less() 和 exch() 分别来比较和交换元素，用长度为 N+1 的私有数组 pq[] 来表示大小为 N 的堆：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> Key[] pq;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">less</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> pq[i].compareTo(pq[j]) &lt; <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">exch</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j)</span> </span>&#123;<br>    Key t = pq[i];<br>    pq[i] = pq[j];<br>    pq[j] = t;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="由下至上的堆有序化（上浮）"><a href="#由下至上的堆有序化（上浮）" class="headerlink" title="由下至上的堆有序化（上浮）"></a>由下至上的堆有序化（上浮）</h3><p>如果堆有序状态因为某结点变得比它的父节点大而打破，那么我们就需要交换它和它的父节点来修复堆。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">swim</span><span class="hljs-params">(<span class="hljs-keyword">int</span> k)</span> </span>&#123;<br>    <span class="hljs-keyword">while</span> (k &gt; <span class="hljs-number">1</span> &amp;&amp; less(k/<span class="hljs-number">2</span>, k)) &#123;<br>        exch(k/<span class="hljs-number">2</span>, k);<br>        k = k/<span class="hljs-number">2</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="由上至下的堆有序化（下沉）"><a href="#由上至下的堆有序化（下沉）" class="headerlink" title="由上至下的堆有序化（下沉）"></a>由上至下的堆有序化（下沉）</h3><p>如果堆有序状态因为某结点变得比它两个子节点或是其中之一更小而被打破了，那么我们需要交换它和子节点中的较大者来恢复堆。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sink</span><span class="hljs-params">(<span class="hljs-keyword">int</span> k)</span> </span>&#123;<br>    <span class="hljs-keyword">while</span>(k &lt;= N/<span class="hljs-number">2</span>) &#123;<br>        <span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>*k;<br>        <span class="hljs-keyword">if</span> (i &lt; N &amp;&amp; less(i, i+<span class="hljs-number">1</span>))<br>            i++;<br>        <span class="hljs-keyword">if</span> (less(k, i)) &#123;<br>            exch(k, i);<br>            k = i;<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="基本实现"><a href="#基本实现" class="headerlink" title="基本实现"></a>基本实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MaxPQ</span>&lt;<span class="hljs-title">Key</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Comparable</span>&lt;<span class="hljs-title">Key</span>&gt;&gt; </span>&#123;<br>    <span class="hljs-keyword">private</span> Key[] pq; <span class="hljs-comment">// 基于堆的完全二叉树</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> N; <span class="hljs-comment">// size</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">less</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> pq[i].compareTo(pq[j]) &lt; <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">exch</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j)</span> </span>&#123;<br>        Key t = pq[i];<br>        pq[i] = pq[j];<br>        pq[j] = t;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">swim</span><span class="hljs-params">(<span class="hljs-keyword">int</span> k)</span> </span>&#123;<br>        <span class="hljs-keyword">while</span> (k &gt; <span class="hljs-number">1</span> &amp;&amp; less(k/<span class="hljs-number">2</span>, k)) &#123;<br>            exch(k/<span class="hljs-number">2</span>, k);<br>            k = k/<span class="hljs-number">2</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sink</span><span class="hljs-params">(<span class="hljs-keyword">int</span> k)</span> </span>&#123;<br>        <span class="hljs-keyword">while</span>(k &lt;= N/<span class="hljs-number">2</span>) &#123;<br>            <span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>*k;<br>            <span class="hljs-keyword">if</span> (i &lt; N &amp;&amp; less(i, i+<span class="hljs-number">1</span>))<br>                i++;<br>            <span class="hljs-keyword">if</span> (less(k, i)) &#123;<br>                exch(k, i);<br>                k = i;<br>            &#125;<br>            <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 创建一个优先队列</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MaxPQ</span><span class="hljs-params">()</span> </span>&#123;&#125;<br><br>    <span class="hljs-comment">// 创建一个初始容量为max的优先队列</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MaxPQ</span><span class="hljs-params">(<span class="hljs-keyword">int</span> max)</span> </span>&#123;<br>        pq = (Key[]) <span class="hljs-keyword">new</span> Comparable[max + <span class="hljs-number">1</span>];<br>    &#125;<br><br>    <span class="hljs-comment">// 用a[]中的元素创建一个优先队列</span><br><span class="hljs-comment">//    public MaxPQ(Key[] a) &#123;&#125;</span><br><br>    <span class="hljs-comment">// 向优先队列中插入一个元素</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(Key v)</span> </span>&#123;<br>        pq[++N] = v; <span class="hljs-comment">// 尾部插入</span><br>        swim(N); <span class="hljs-comment">// 上浮</span><br>    &#125;<br><br>    <span class="hljs-comment">// 返回最大元素</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Key <span class="hljs-title">max</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> pq[<span class="hljs-number">1</span>];<br>    &#125;<br><br>    <span class="hljs-comment">// 删除并返回最大元素</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Key <span class="hljs-title">delMax</span><span class="hljs-params">()</span> </span>&#123;<br>        Key v = pq[<span class="hljs-number">1</span>];<br>        pq[<span class="hljs-number">1</span>] =  pq[N]; <span class="hljs-comment">// 从尾部取值替换根结点</span><br>        pq[N--] = <span class="hljs-keyword">null</span>; <span class="hljs-comment">// 将尾部置空</span><br>        sink(<span class="hljs-number">1</span>); <span class="hljs-comment">// 下沉根结点</span><br>        <span class="hljs-keyword">return</span> v;<br>    &#125;<br><br>    <span class="hljs-comment">// 返回队列是否为空</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isEmpty</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> N == <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 返回优先队列中的元素个数</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">size</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> N;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h2><p>我们可以把任意优先队列变成一种排序方法。将所有元素插入一个查找最小元素的优先队列，然后重复调用删除最小元素的操作来将他们按顺序删去。用无序数组实现的优先队列这么做相当于进行一次选择排序，而基于堆的优先队列这么做就是一种经典而优雅的排序算法——堆排序。</p><p>堆排序分两个阶段：先构造堆后删除元素排序。</p><p>构造堆我们可以跳过大小为1的子堆，因为它们并无子结点，他们占总数的一半。而对他们的父节点从下至上调用sink() 函数最终就能得到一个堆。</p><p>而排序阶段我们可以将根结点和末尾元素交换，长度减一，再将新的根结点下沉，如此重复即可有序。</p><p>这里要注意的是二叉堆数组是基1的，在 less 和 exch 函数中我们要将索引-1（将 a[0] 至 a[N-1] 排序）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Heap</span> </span>&#123;<br>    <span class="hljs-comment">// 排序算法的实现</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sort</span><span class="hljs-params">(Comparable[] a)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> N = a.length;<br>        <span class="hljs-comment">// 构造堆</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = N/<span class="hljs-number">2</span>; k &gt;= <span class="hljs-number">1</span>; k--) &#123;<br>            sink(a, k, N);<br>        &#125;<br>        <span class="hljs-comment">// 排序</span><br>        <span class="hljs-keyword">while</span> (N &gt; <span class="hljs-number">1</span>) &#123;<br>            exch(a, N--, <span class="hljs-number">1</span>);<br>            sink(a, <span class="hljs-number">1</span>, N);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sink</span><span class="hljs-params">(Comparable[] a, <span class="hljs-keyword">int</span> k, <span class="hljs-keyword">int</span> N)</span> </span>&#123;<br>        <span class="hljs-keyword">while</span> (k &lt;= N/<span class="hljs-number">2</span>) &#123;<br>            <span class="hljs-keyword">int</span> j = <span class="hljs-number">2</span>*k;<br>            <span class="hljs-keyword">if</span> (j &lt; N &amp;&amp; less(a, j, j+<span class="hljs-number">1</span>))<br>                j++;<br>            <span class="hljs-keyword">if</span> (less(a, k, j)) &#123;<br>                exch(a, k, j);<br>                k = j;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 比较前者是否小于后者</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">less</span><span class="hljs-params">(Comparable[] a, <span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j)</span> </span>&#123;<br>        i--; j--; <span class="hljs-comment">// 构造二叉堆的数组是基1的，这里要减去（对a[0]至a[N-1]操作）</span><br>        <span class="hljs-keyword">return</span> a[i].compareTo(a[j]) &lt; <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 交换数组中两个位置的元素</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">exch</span><span class="hljs-params">(Comparable[] a, <span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j)</span> </span>&#123;<br>        i--; j--; <span class="hljs-comment">// 构造二叉堆的数组是基1的，这里要减去（对a[0]至a[N-1]操作）</span><br>        Comparable t = a[i];<br>        a[i] = a[j];<br>        a[j] = t;<br>    &#125;<br><br>    <span class="hljs-comment">// 打印数组</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">(Comparable[] a)</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; a.length; i++) &#123;<br>            System.out.print(a[i] + <span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br>        System.out.println();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Comparable[] arr = &#123;<span class="hljs-number">45</span>, <span class="hljs-number">2</span>, <span class="hljs-number">17</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">85</span>, <span class="hljs-number">3</span>, <span class="hljs-number">51</span>, <span class="hljs-number">20</span>&#125;;<br>        Heap.sort(arr);<br>        Heap.show(arr);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>算法</tag>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>从零开始的算法之路03——排序</title>
    <link href="/2022/01/06/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84%E7%AE%97%E6%B3%95%E4%B9%8B%E8%B7%AF03%E2%80%94%E2%80%94%E6%8E%92%E5%BA%8F/"/>
    <url>/2022/01/06/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84%E7%AE%97%E6%B3%95%E4%B9%8B%E8%B7%AF03%E2%80%94%E2%80%94%E6%8E%92%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="游戏规则"><a href="#游戏规则" class="headerlink" title="游戏规则"></a>游戏规则</h2><p>我们关注的是重新排列数组元素的算法，其中每个元素都有一个主键。排序算法的目标就是将所有元素的主键按照某种方式排列。排序后索引较大的主键大小大于等于索引较小的主键。在 java 中，元素通常是对象，对主键的抽象描述则是通过实现 Comparable 接口实现的。以下则是“排序类算法模板”：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Example</span> </span>&#123;<br>    <span class="hljs-comment">// 排序算法的实现</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sort</span><span class="hljs-params">(Comparable[] a)</span> </span>&#123;<br>        <span class="hljs-comment">//todo</span><br>    &#125;<br>    <br>    <span class="hljs-comment">// 比较前者是否小于后者</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">less</span><span class="hljs-params">(Comparable v, Comparable w)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> v.compareTo(w) &lt; <span class="hljs-number">0</span>;<br>    &#125;<br>    <br>    <span class="hljs-comment">// 交换数组中两个位置的元素</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">exch</span><span class="hljs-params">(Comparable[] a, <span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j)</span> </span>&#123;<br>        Comparable t = a[i];<br>        a[i] = a[j];<br>        a[j] = t;<br>    &#125;<br>    <br>    <span class="hljs-comment">// 打印数组</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">(Comparable[] a)</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; a.length; i++) &#123;<br>            System.out.print(a[i] + <span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br>        System.out.println();<br>    &#125;<br>    <br>    <span class="hljs-comment">// 测试数组是否有序</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isSorted</span><span class="hljs-params">(Comparable[] a)</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; a.length; i++) &#123;<br>            <span class="hljs-keyword">if</span> (less(a[i], a[i-<span class="hljs-number">1</span>]))<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><p>一种最简单的排序算法：首先找到数组中最小的元素，其次将它和数组中第一个元素交换位置。再次在剩下元素中找到最小元素，将它与数组第二个元素交换位置……若此反复，直到排序完成。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 排序算法的实现</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sort</span><span class="hljs-params">(Comparable[] a)</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; a.length; i++) &#123;<br>            <span class="hljs-keyword">int</span> min = i; <span class="hljs-comment">// 最小元素索引</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i + <span class="hljs-number">1</span>; j &lt; a.length; j++) &#123;<br>                <span class="hljs-keyword">if</span> (less(a[j], a[min]))<br>                    min = j; <span class="hljs-comment">// 最小元素索引更新</span><br>            &#125;<br>            exch(a, min, i); <span class="hljs-comment">// 与最小元素交换位置</span><br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>选择排序两大特点：</p><p>运行时间和输入无关</p><p>数据移动是最少的（数组长度）</p><h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><p>与选择排序一样，当前索引左边的元素都是有序的，但他们的最终位置还不确定，为了给更小的元素腾出空间，他们可能会被移动。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 排序算法的实现</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sort</span><span class="hljs-params">(Comparable[] a)</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; a.length; i++) &#123;<br>            <span class="hljs-comment">// 从当前索引逆向循环比较，若比前一位小，则说明需要交换位置，继续循环</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i; j &gt; <span class="hljs-number">0</span> &amp;&amp; less(a[j], a[j-<span class="hljs-number">1</span>]); j--) &#123;<br>                exch(a, j, j-<span class="hljs-number">1</span>);<br>            &#125;<br>        &#125; <br>    &#125;<br></code></pre></td></tr></table></figure><p>和选择排序不同，插入排序所需的时间取决于输入中元素的初始顺序，若数组已经有序（或接近有序）速度会快得多。</p><h2 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h2><p>希尔排序是基于插入排序的改良算法。其思想是使数组中任意间隔为 h 的元素都是有序的。这样的数组被称为 h 有序数组。一个 h 有序数组就是 h 个互相独立的有序数组编织在一起组成的一个数组。</p><p>实现希尔排序的一种方法是对于每个 h ，用插入排序将 h 个子数组独立排序。但因为子数组之间是独立的，一个更简单的方法是在 h 子数组中将每个元素交换到比它大的元素之前去（也就是说将比它大的元素都往右移动一格），换言之，插入排序算法是每次都往前1格进行交换，希尔排序只需要改为 h 即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 排序算法的实现</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sort</span><span class="hljs-params">(Comparable[] a)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> N = a.length; <span class="hljs-comment">// 数组长度</span><br>        <span class="hljs-keyword">int</span> h = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (h &lt; N/<span class="hljs-number">3</span>) &#123;<br>            h = <span class="hljs-number">3</span> * h + <span class="hljs-number">1</span>; <span class="hljs-comment">// h 初始分组确定</span><br>        &#125;<br>        <br>        <span class="hljs-keyword">while</span> (h &gt;= <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-comment">// 将数组变为h有序</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = h; i &lt; N; i++) &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i; j &gt;= h &amp;&amp; less(a[j], a[j-h]); j -= h)<br>                    exch(a, j, j-h);<br>            &#125;<br>            <span class="hljs-comment">// 缩小h，进行更小的h组排序 （当h=1时就是插入排序，但此时数组已接近有序）</span><br>            h = h/<span class="hljs-number">3</span>;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><p>要将一个数组排序，可以先（递归地）将它分成两半分别排序，然后把结果归并起来。归并排序最吸引人的性质是它能够保证将任意长度为 N 的数组排序所需时间和 NlogN 成正比，主要缺点则是它需要的额外空间与 N 成正比。</p><h3 id="原地归并"><a href="#原地归并" class="headerlink" title="原地归并"></a>原地归并</h3><p>实现归并最直截了当的方法是将两个不同的有序数组归并到第三个数组中，但多次归并意味着不停创建新的数组。我们更希望有一种原地归并的方法，在归并的过程中不用使用额外的空间。这里有个利用辅助数组复制原数组的实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Comparable[] aux; <span class="hljs-comment">// 归并所需辅助数组</span><br><br><span class="hljs-comment">// 归并数组a[lo, mid]、a[mid+1, hi]</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">merge</span><span class="hljs-params">(Comparable[] a, <span class="hljs-keyword">int</span> lo, <span class="hljs-keyword">int</span> mid, <span class="hljs-keyword">int</span> hi)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> i = lo, j = mid+<span class="hljs-number">1</span>; <span class="hljs-comment">// 先用i, j 两个指针保存一下两个数组的起始位置</span><br><br>    <span class="hljs-comment">// 复制原数组到aux进行备份, aux不做移动操作，仅用来比较大小和取数据</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = lo; k &lt;= hi; k++)<br>        aux[k] = a[k];<br><br>    <span class="hljs-comment">// 进行归并</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = lo; k &lt;= hi; k++) &#123;<br>        <span class="hljs-keyword">if</span> (i &gt; mid)<br>            a[k] = aux[j++]; <span class="hljs-comment">// 若左边数组指针超过上限，直接从右边数组取值</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (j &gt; hi)<br>            a[k] = aux[i++]; <span class="hljs-comment">// 若右边数组指针超过上限，直接从左边数组取值</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (less(aux[j], aux[i]))<br>            a[k] = aux[j++]; <span class="hljs-comment">// 若i、j指针均未超过上限，进行数值比较，取值小的那一个</span><br>        <span class="hljs-keyword">else</span><br>            a[k] = aux[i++]; <span class="hljs-comment">// 若i、j指针均未超过上限，进行数值比较，取值小的那一个</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="自顶向下归并"><a href="#自顶向下归并" class="headerlink" title="自顶向下归并"></a>自顶向下归并</h3><p>基于原地归并的实现，可以用分治思想来实现排序：想将一个大数组排序，可以先把数组切分为两个子数组，依次排序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 排序算法的实现</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sort</span><span class="hljs-params">(Comparable[] a)</span> </span>&#123;<br>        aux = <span class="hljs-keyword">new</span> Comparable[a.length];<br>        sort(a, <span class="hljs-number">0</span>, a.length-<span class="hljs-number">1</span>);<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sort</span><span class="hljs-params">(Comparable[] a, <span class="hljs-keyword">int</span> lo, <span class="hljs-keyword">int</span> hi)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (hi &lt;= lo)<br>            <span class="hljs-keyword">return</span>; <span class="hljs-comment">// 递归出口，当数组上下限交接时代表排序可以退出</span><br>        <span class="hljs-keyword">int</span> mid = lo + (hi - lo) / <span class="hljs-number">2</span>;<br>        sort(a, lo, mid); <span class="hljs-comment">// 递归排序左数组</span><br>        sort(a, mid+<span class="hljs-number">1</span>, hi); <span class="hljs-comment">// 递归排序右数组</span><br>        merge(a, lo, mid, hi); <span class="hljs-comment">// 归并结果</span><br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="自底向上归并"><a href="#自底向上归并" class="headerlink" title="自底向上归并"></a>自底向上归并</h3><p>另一种反过来的分治思想，可以先把长度为1的数组两两合并，再以长度为2的数组进行两两合并，直至最终成为一个大的有序数组。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 排序算法的实现</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sort</span><span class="hljs-params">(Comparable[] a)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> N = a.length;<br>        aux = <span class="hljs-keyword">new</span> Comparable[N];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> sz = <span class="hljs-number">1</span>; sz &lt; N; sz = <span class="hljs-number">2</span>*sz) <span class="hljs-comment">// sz 子数组大小</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> lo = <span class="hljs-number">0</span>; lo + sz &lt; N; lo += <span class="hljs-number">2</span>*sz)<br>                merge(a, lo, lo + sz -<span class="hljs-number">1</span>, Math.min(lo+<span class="hljs-number">2</span>*sz-<span class="hljs-number">1</span>, N-<span class="hljs-number">1</span>)); <br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><p>快排也是基于分治思想的一种算法，和归并排序类似，也是将一个数组分成2个子数组，各自独立排序。不同点在于，归并排序中递归发生在处理数组之前，而在快排中递归发生在处理数组之后。归并排序是将数组等分为两半，但快排切分（partition）位置则取决于数组的内容。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 排序算法的实现</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sort</span><span class="hljs-params">(Comparable[] a)</span> </span>&#123;<br>    sort(a, <span class="hljs-number">0</span>, a.length-<span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sort</span><span class="hljs-params">(Comparable[] a, <span class="hljs-keyword">int</span> lo, <span class="hljs-keyword">int</span> hi)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (hi &lt;= lo)<br>        <span class="hljs-keyword">return</span>; <span class="hljs-comment">// 递归出口，上下限交接时退出</span><br>    <span class="hljs-keyword">int</span> j = partition(a, lo, hi); <span class="hljs-comment">// 找出切分索引j;</span><br>    sort(a, lo, j-<span class="hljs-number">1</span>); <span class="hljs-comment">// 递归排序j左边的数组</span><br>    sort(a, j+<span class="hljs-number">1</span>, hi); <span class="hljs-comment">// 递归排序j右边的数组</span><br>&#125;<br></code></pre></td></tr></table></figure><p>从代码可以看出，快排的核心算法在于切分如何实现，我们希望切分后，j 所在的元素正好处于正确位置，即 j 的左边元素均比它小，而右边元素均比它大。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">partition</span><span class="hljs-params">(Comparable[] a, <span class="hljs-keyword">int</span> lo, <span class="hljs-keyword">int</span> hi)</span> </span>&#123;<br>    <span class="hljs-comment">// 选取标志位数值，这里选取左起第0位</span><br>    Comparable flag = a[lo];<br>    <span class="hljs-comment">// 定义左右指针，分别是标志位和右上限+1，两边都预留了1位冗余，因为下面要做前置自增减运算</span><br>    <span class="hljs-keyword">int</span> i = lo, j = hi + <span class="hljs-number">1</span>; <br>    <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<br>        <span class="hljs-comment">// 左指针自增，当元素值大于标志时停止</span><br>        <span class="hljs-comment">// 这里统一采用前置自增减，为的是先计算后使用，保证比较的数值和后面交换的索引是及时对应的</span><br>        <span class="hljs-keyword">while</span> (less(a[++i], flag))<br>            <span class="hljs-comment">// 检测左指针是否到达右上限，若到达也停止</span><br>            <span class="hljs-keyword">if</span> (i == hi)<br>                <span class="hljs-keyword">break</span>;<br>        <span class="hljs-comment">// 右指针自减，当元素值小于标志时停止</span><br>        <span class="hljs-keyword">while</span> (less(flag, a[--j]))<br>            <span class="hljs-comment">// 检测右指针是否到达左下限，若到达也停止</span><br>            <span class="hljs-keyword">if</span> (j == lo)<br>                <span class="hljs-keyword">break</span>;<br>        <span class="hljs-comment">// 检测左右指针是否相交，若相交退出循环</span><br>        <span class="hljs-keyword">if</span> (i &gt;= j)<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-comment">// 交换左右指针所在的元素，即可保证左边区域一直比标志小，右边区域一直比标志大</span><br>        exch(a, i, j);<br>    &#125;<br>    <span class="hljs-comment">// 循环结束时j所指元素肯定是小于标志的，所以交换它俩，保证标志左侧元素始终小于标志</span><br>    <span class="hljs-comment">// 如果标志位定的右起第0位hi 这里就要交换i</span><br>    exch(a, lo, j);<br>    <span class="hljs-comment">// 返回最终标志所在索引，即正确的位置，也就是切分点</span><br>    <span class="hljs-keyword">return</span> j;<br>&#125;<br></code></pre></td></tr></table></figure><p>但快排有个缺点，切分不平衡时会非常低效，设想一下如果第一次从最小的元素切分，第二次从第二小的元素切分，如此这般，每次调用只会移除一个元素。这会导致一个大子数组需要切分很多次。</p><p>我们当然可以采用数组小于一个阈值时切换成插入排序，对于小数组，插入排序要快于快排。</p><p>也可以使用三取样切分，也就说标志位取3个并用大小居中的元素来切分。</p><h3 id="三向切分的快速排序"><a href="#三向切分的快速排序" class="headerlink" title="三向切分的快速排序"></a>三向切分的快速排序</h3><p>还有一种简单的想法，来应对实际应用中出现含有大量重复元素时：将数组切分为三部分，分别对应小于、等于、大于切分元素的数组元素。</p><p>具体实现：从左到右遍历数组一次。维护一个指针 lt 使得 a[lo..lt-1] 的元素都小于 flag，一个指针 gt 是的 a[gt..hi] 中元素都大于 flag，a[i..gt] 中的元素都还未确定。一开始 i 和 lo + 1 相等：</p><ul><li>a[i] 小于 flag， 将 a[lt] 和 a[i] 交换，将 lt 和 i 加一；</li><li>a[i] 大于 flag， 将 a[gt] 和 a[i] 交换，将 gt 减少一；</li><li>a[i] 等于 flag， 将 i 加一；</li><li>将 i 和 gt 重合时结束。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 排序算法的实现</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sort</span><span class="hljs-params">(Comparable[] a)</span> </span>&#123;<br>    sort(a, <span class="hljs-number">0</span>, a.length-<span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sort</span><span class="hljs-params">(Comparable[] a, <span class="hljs-keyword">int</span> lo, <span class="hljs-keyword">int</span> hi)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (hi &lt;= lo)<br>        <span class="hljs-keyword">return</span>; <span class="hljs-comment">// 递归出口，上下限交接时退出</span><br>    <span class="hljs-keyword">int</span> lt = lo, i = lo + <span class="hljs-number">1</span>, gt = hi;<br>    Comparable flag = a[lo];<br>    <span class="hljs-keyword">while</span> (i &lt;= gt) &#123;<br>        <span class="hljs-keyword">if</span> (less(a[i], flag))<br>            exch(a, lt++, i++);<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (less(flag, a[i]))<br>            exch(a, gt--, i);<br>        <span class="hljs-keyword">else</span><br>            i++;<br>    &#125;<br><br>    sort(a, lo, lt-<span class="hljs-number">1</span>); <span class="hljs-comment">// 递归排序左边的数组</span><br>    sort(a, gt+<span class="hljs-number">1</span>, hi); <span class="hljs-comment">// 递归排序右边的数组</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h2><p><em>关于堆排序相关的概念在下一篇讲优先队列的博文中进行了详细描述。</em></p><p>我们可以把任意优先队列变成一种排序方法。将所有元素插入一个查找最小元素的优先队列，然后重复调用删除最小元素的操作来将他们按顺序删去。用无序数组实现的优先队列这么做相当于进行一次选择排序，而基于堆的优先队列这么做就是一种经典而优雅的排序算法——堆排序。</p><p>堆排序分两个阶段：先构造堆后删除元素排序。</p><p>构造堆我们可以跳过大小为1的子堆，因为它们并无子结点，他们占总数的一半。而对他们的父节点从下至上调用sink() 函数最终就能得到一个堆。</p><p>而排序阶段我们可以将根结点和末尾元素交换，长度减一，再将新的根结点下沉，如此重复即可有序。</p><p>这里要注意的是二叉堆数组是基1的，在 less 和 exch 函数中我们要将索引-1（将 a[0] 至 a[N-1] 排序）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Heap</span> </span>&#123;<br>    <span class="hljs-comment">// 排序算法的实现</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sort</span><span class="hljs-params">(Comparable[] a)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> N = a.length;<br>        <span class="hljs-comment">// 构造堆</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = N/<span class="hljs-number">2</span>; k &gt;= <span class="hljs-number">1</span>; k--) &#123;<br>            sink(a, k, N);<br>        &#125;<br>        <span class="hljs-comment">// 排序</span><br>        <span class="hljs-keyword">while</span> (N &gt; <span class="hljs-number">1</span>) &#123;<br>            exch(a, N--, <span class="hljs-number">1</span>);<br>            sink(a, <span class="hljs-number">1</span>, N);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sink</span><span class="hljs-params">(Comparable[] a, <span class="hljs-keyword">int</span> k, <span class="hljs-keyword">int</span> N)</span> </span>&#123;<br>        <span class="hljs-keyword">while</span> (k &lt;= N/<span class="hljs-number">2</span>) &#123;<br>            <span class="hljs-keyword">int</span> j = <span class="hljs-number">2</span>*k;<br>            <span class="hljs-keyword">if</span> (j &lt; N &amp;&amp; less(a, j, j+<span class="hljs-number">1</span>))<br>                j++;<br>            <span class="hljs-keyword">if</span> (less(a, k, j)) &#123;<br>                exch(a, k, j);<br>                k = j;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 比较前者是否小于后者</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">less</span><span class="hljs-params">(Comparable[] a, <span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j)</span> </span>&#123;<br>        i--; j--; <span class="hljs-comment">// 构造二叉堆的数组是基1的，这里要减去（对a[0]至a[N-1]操作）</span><br>        <span class="hljs-keyword">return</span> a[i].compareTo(a[j]) &lt; <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 交换数组中两个位置的元素</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">exch</span><span class="hljs-params">(Comparable[] a, <span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j)</span> </span>&#123;<br>        i--; j--; <span class="hljs-comment">// 构造二叉堆的数组是基1的，这里要减去（对a[0]至a[N-1]操作）</span><br>        Comparable t = a[i];<br>        a[i] = a[j];<br>        a[j] = t;<br>    &#125;<br><br>    <span class="hljs-comment">// 打印数组</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">(Comparable[] a)</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; a.length; i++) &#123;<br>            System.out.print(a[i] + <span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br>        System.out.println();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Comparable[] arr = &#123;<span class="hljs-number">45</span>, <span class="hljs-number">2</span>, <span class="hljs-number">17</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">85</span>, <span class="hljs-number">3</span>, <span class="hljs-number">51</span>, <span class="hljs-number">20</span>&#125;;<br>        Heap.sort(arr);<br>        Heap.show(arr);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="各种排序算法的性能特点"><a href="#各种排序算法的性能特点" class="headerlink" title="各种排序算法的性能特点"></a>各种排序算法的性能特点</h2><p><img src="/2022/01/06/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84%E7%AE%97%E6%B3%95%E4%B9%8B%E8%B7%AF03%E2%80%94%E2%80%94%E6%8E%92%E5%BA%8F/1-1.png"></p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>算法</tag>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo主题Fluid设置固定背景</title>
    <link href="/2021/12/24/Hexo%E4%B8%BB%E9%A2%98Fluid%E8%AE%BE%E7%BD%AE%E5%9B%BA%E5%AE%9A%E8%83%8C%E6%99%AF/"/>
    <url>/2021/12/24/Hexo%E4%B8%BB%E9%A2%98Fluid%E8%AE%BE%E7%BD%AE%E5%9B%BA%E5%AE%9A%E8%83%8C%E6%99%AF/</url>
    
    <content type="html"><![CDATA[<p>Fluid 主题挺好看的，但是官方文档上说不支持固定背景（fixed）</p><p><img src="/2021/12/24/Hexo%E4%B8%BB%E9%A2%98Fluid%E8%AE%BE%E7%BD%AE%E5%9B%BA%E5%AE%9A%E8%83%8C%E6%99%AF/1-0.png"></p><p>实际上有些 banner 图就是要固定背景，才有那种沉浸的美感：<a href="https://tsuiraku.com/">tsuiraku</a></p><p>我对前端一窍不通，询问过 tsuiraku 以后追溯到一篇魔改的教程：<a href="https://aigisss.com/blog/posts/1563abd8.html">基于hexo的fluid主题的魔改汇总</a></p><p>基于这篇文章自己动手试了下，确实可行。</p><p>本人是采用 release 包（hexo-theme-fluid-1.8.12）解压到 themes 目录的方式安装的 fluid，本地目录如图：</p><p><img src="/2021/12/24/Hexo%E4%B8%BB%E9%A2%98Fluid%E8%AE%BE%E7%BD%AE%E5%9B%BA%E5%AE%9A%E8%83%8C%E6%99%AF/1-1.png"></p><p>博客的根目录为 ~/blog，主题解压位置为 ~/blog/themes/fluid</p><p>接下来创建三个文件</p><ul><li>进入 ~/blog/themes/fluid/scripts 创建 injector.js 文件</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 全屏背景的需要导入这些js</span><br><span class="hljs-keyword">const</span> &#123; <span class="hljs-attr">root</span>: siteRoot = <span class="hljs-string">&quot;/themes/fluid/source/&quot;</span> &#125; = hexo.config;<br>hexo.extend.injector.register(<span class="hljs-string">&quot;body_begin&quot;</span>, <span class="hljs-string">`&lt;div id=&quot;web_bg&quot;&gt;&lt;/div&gt;`</span>);<br>hexo.extend.injector.register(<br>  <span class="hljs-string">&quot;body_end&quot;</span>,<br>  <span class="hljs-string">`&lt;script src=&quot;<span class="hljs-subst">$&#123;siteRoot&#125;</span>js/backgroundize.js&quot;&gt;&lt;/script&gt;</span><br><span class="hljs-string">  &lt;link defer rel=&quot;stylesheet&quot; href=&quot;<span class="hljs-subst">$&#123;siteRoot&#125;</span>css/backgroundize.css&quot; /&gt;</span><br><span class="hljs-string">  `</span><br>);<br></code></pre></td></tr></table></figure><ul><li>进入 ~/blog/themes/fluid/source/js 创建 backgroundize.js 文件</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> bannerContainer = $(<span class="hljs-string">&quot;#banner&quot;</span>);<br><span class="hljs-keyword">const</span> viewBg = $(<span class="hljs-string">&quot;#web_bg&quot;</span>);<br><span class="hljs-keyword">const</span> bannerMask = $(<span class="hljs-string">&quot;#banner .mask&quot;</span>);<br><span class="hljs-keyword">const</span> bg = $(bannerContainer).css(<span class="hljs-string">&quot;background-image&quot;</span>);<br>$(viewBg).css(<span class="hljs-string">&quot;background-image&quot;</span>, bg);<br>$(bannerContainer).css(<span class="hljs-string">&quot;background-image&quot;</span>, <span class="hljs-string">&quot;url()&quot;</span>);<br><span class="hljs-keyword">const</span> color = $(bannerMask).css(<span class="hljs-string">&quot;background-color&quot;</span>);<br>$(bannerMask).css(<span class="hljs-string">&quot;background-color&quot;</span>, <span class="hljs-string">`rgba(0,0,0,0)`</span>);<br>$(viewBg).css(<span class="hljs-string">&quot;background-color&quot;</span>, color);<br></code></pre></td></tr></table></figure><ul><li>进入 ~/blog/themes/fluid/source/css 创建 backgroundize.css 文件</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-id">#web_bg</span> &#123;<br>    <span class="hljs-attribute">position</span>: fixed;<br>    <span class="hljs-attribute">z-index</span>: -<span class="hljs-number">999</span>;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;<br>    <span class="hljs-attribute">background-attachment</span>: local;<br>    <span class="hljs-attribute">background-position</span>: center;<br>    -webkit-<span class="hljs-attribute">background-size</span>: cover;<br>    -moz-<span class="hljs-attribute">background-size</span>: cover;<br>    <span class="hljs-attribute">background-size</span>: cover;<br>    <span class="hljs-attribute">background-repeat</span>: repeat;<br>  &#125;<br></code></pre></td></tr></table></figure><p>之后执行 <code>hexo clean    </code> 和 <code>hexo server</code>查看效果吧。</p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>js</tag>
      
      <tag>css</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>从零开始的算法之路02——union-find算法</title>
    <link href="/2021/12/20/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84%E7%AE%97%E6%B3%95%E4%B9%8B%E8%B7%AF02%E2%80%94%E2%80%94union-find%E7%AE%97%E6%B3%95/"/>
    <url>/2021/12/20/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84%E7%AE%97%E6%B3%95%E4%B9%8B%E8%B7%AF02%E2%80%94%E2%80%94union-find%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="动态连通性"><a href="#动态连通性" class="headerlink" title="动态连通性"></a>动态连通性</h2><p>问题说明：问题的输入是一列整数对，其中每个整数都表示一个某种类型的对象，一对整数 p q 可以被理解为“ p 和 q 是相连的”。我们假设“相连”是一种等价关系，这也就意味着它具有：</p><ul><li>自反性：p 和 p是相连的；</li><li>对称性：如果 p 和 q 是相连的，那么 q 和 p 也是相连的；</li><li>传递性：如果 p 和 q 是相连的且 q 和 r 是相连的，那么 p 和 r 也是相连的。</li></ul><p>等价关系能够将对象分为多个等价类。在这里，当且仅当两个对象相连时它们才属于同一个等价类。我们的目标是编写一个程序来过滤掉序列中所有无意义的整数对（两个整数对均来自于同一个等价类中）。换句话说，当程序从输入中读取了整数对 p q 时，如果已知的所有整数对都不能说明 p 和 q  是相连的，那么则将这一对整数写入到输出中。如果已知的数据可以说明 p 和 q 是相连的，那么程序应该忽略 p q 这对整数对并继续处理输入的下一对整数。</p><p><img src="/2021/12/20/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84%E7%AE%97%E6%B3%95%E4%B9%8B%E8%B7%AF02%E2%80%94%E2%80%94union-find%E7%AE%97%E6%B3%95/1-1.png"></p><p>上图用一个例子说明了这个过程，而我们需要设计一个数据结构来保存已知的所有整数对的足够多的信息，并用他们来判断一对新对象是否是相连的。我们将这个问题通俗地叫做动态连通性问题。这个问题一般有以下几种应用：</p><p><em>网络（计算机网络架设、电子电路中的触点、社交网络关系）</em></p><p><em>变量名等价性（某些编程环境下的别名 alias）</em></p><p><em>数学集合 （更高的抽象层次，这里不展开讲了）</em></p><p>在这里我们统一一下术语：将对象称为<strong>触点</strong>，将整数对称为<strong>连接</strong>，将等价类称为<strong>连通分量</strong>或简称为<strong>分量</strong>。</p><p><img src="/2021/12/20/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84%E7%AE%97%E6%B3%95%E4%B9%8B%E8%B7%AF02%E2%80%94%E2%80%94union-find%E7%AE%97%E6%B3%95/1-2.png" alt="你能一眼看出任意两点是否连通吗？"></p><p>设计一份 API 来封装所需的基本操作：初始化、连接两个触点、判断包含某个触点的分量、判断两个触点是否存在于同一个分量之中以及返回所有分量的数量：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UF</span> </span>&#123;<br>    <span class="hljs-comment">// 以整数标示（0到N-1）初始化N个触点</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">UF</span><span class="hljs-params">(<span class="hljs-keyword">int</span> N)</span> </span>&#123;&#125;<br>    <br>    <span class="hljs-comment">// 在p和q之间添加一条连接</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">union</span><span class="hljs-params">(<span class="hljs-keyword">int</span> p, <span class="hljs-keyword">int</span> q)</span> </span>&#123;&#125;<br>    <br>    <span class="hljs-comment">// p（0到N-1）所在分量的标识符</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-keyword">int</span> p)</span> </span>&#123;&#125;<br>    <br>    <span class="hljs-comment">// 如果p和q存在于同一分量重则返回true</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">connected</span><span class="hljs-params">(<span class="hljs-keyword">int</span> p, <span class="hljs-keyword">int</span> q)</span> </span>&#123;&#125;<br>    <br>    <span class="hljs-comment">// 连通分量的数量</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">count</span><span class="hljs-params">()</span> </span>&#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>基本实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UF</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span>[] id; <span class="hljs-comment">// 分量id（以触点作为索引）</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> count; <span class="hljs-comment">// 分量数量</span><br><br>    <span class="hljs-comment">// 以整数标示（0到N-1）初始化N个触点</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">UF</span><span class="hljs-params">(<span class="hljs-keyword">int</span> N)</span> </span>&#123;<br>        count = N;<br>        id = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[N];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; N; i++)<br>            id[i] = i;<br>    &#125;<br><br>    <span class="hljs-comment">// 在p和q之间添加一条连接 todo</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">union</span><span class="hljs-params">(<span class="hljs-keyword">int</span> p, <span class="hljs-keyword">int</span> q)</span> </span>&#123;&#125;<br><br>    <span class="hljs-comment">// p（0到N-1）所在分量的标识符 todo</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-keyword">int</span> p)</span> </span>&#123;&#125;<br><br>    <span class="hljs-comment">// 如果p和q存在于同一分量中则返回true</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">connected</span><span class="hljs-params">(<span class="hljs-keyword">int</span> p, <span class="hljs-keyword">int</span> q)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> find(p) == find(q);<br>    &#125;<br>    <br>    <span class="hljs-comment">// 连通分量的数量</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">count</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> count;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="quick-find-算法"><a href="#quick-find-算法" class="headerlink" title="quick-find 算法"></a>quick-find 算法</h2><p>一种方法是保证当且仅当 id[p] 等于 id[q] 时 p 和 q 是连通的。换句话说，在同一个连通分量当中的所有触点在 id[] 中的值必须全部相同。数组中保存的值，即为当前触点（索引）对应的分量标识符。当对两个非连通触点进行连接时，则需要遍历整个数组，将所有的和 id[p] 相等的元素的值变为 id[q] 的值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 在p和q之间添加一条连接 </span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">union</span><span class="hljs-params">(<span class="hljs-keyword">int</span> p, <span class="hljs-keyword">int</span> q)</span> </span>&#123;<br>       <span class="hljs-keyword">int</span> pId = find(p);<br>       <span class="hljs-keyword">int</span> qId = find(q);<br>       <span class="hljs-keyword">if</span> (pId != qId) &#123;<br>           <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; id.length; i++) &#123;<br>               <span class="hljs-comment">// 将p的分量重设为q的分量</span><br>               <span class="hljs-keyword">if</span> (id[i] == pId) &#123;<br>                   id[i] = qId;<br>               &#125;<br>           &#125;<br>           count--;<br>       &#125;<br>   &#125;<br><br>   <span class="hljs-comment">// p（0到N-1）所在分量的标识符 </span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-keyword">int</span> p)</span> </span>&#123;<br>       <span class="hljs-keyword">return</span> id[p];<br>   &#125;<br></code></pre></td></tr></table></figure><p>不难看出 quick-find 算法中 find() 的操作速度是很快的，因为它只需要访问 id[] 数组一次。但这一般无法处理大型问题，因为对于每一对输入 union() 都需要扫描整个 id[] 数组。我们需要寻找更好的算法。</p><h2 id="quick-union-算法"><a href="#quick-union-算法" class="headerlink" title="quick-union 算法"></a>quick-union 算法</h2><p>我们现在尝试提升 union() 的速度，这次对 id[] 数组的值赋予不同的意义，每个触点（索引）对应的值不再直接就是分量了，而是指向另外一个触点（索引），而当触点指向自己本身（索引）时，才是真正的分量。可以想象这些连通分量，像一棵树一样连接在一起，一层一层向上追溯，而根节点即为分量。</p><p><img src="/2021/12/20/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84%E7%AE%97%E6%B3%95%E4%B9%8B%E8%B7%AF02%E2%80%94%E2%80%94union-find%E7%AE%97%E6%B3%95/1-3.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 在p和q之间添加一条连接</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">union</span><span class="hljs-params">(<span class="hljs-keyword">int</span> p, <span class="hljs-keyword">int</span> q)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> pRoot = find(p);<br>    <span class="hljs-keyword">int</span> qRoot = find(q);<br>    <span class="hljs-keyword">if</span> (pRoot != qRoot) &#123;<br>        <span class="hljs-comment">// 将p的root节点的值，改为q的root的索引</span><br>        id[pRoot] = qRoot;<br>        count--;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// p（0到N-1）所在分量的标识符</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-keyword">int</span> p)</span> </span>&#123;<br>    <span class="hljs-comment">// 当索引与值不相等时，往上追溯</span><br>    <span class="hljs-keyword">while</span> (p != id[p])<br>        p = id[p];<br>    <span class="hljs-comment">// 当索引与值相等时，表示已追溯到根，即分量</span><br>    <span class="hljs-keyword">return</span> p;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="加权-quick-union-算法"><a href="#加权-quick-union-算法" class="headerlink" title="加权 quick-union 算法"></a>加权 quick-union 算法</h2><p><strong>定义：一颗树的大小是它的节点的数量。树中的一个节点的深度是它到根节点的路径上的链接数。树的高度是它所有节点中的最大深度</strong></p><p><em>命题：quick-union 算法中的 find() 方法访问数组的次数为1加上给定触点所对应的节点的深度的两倍。</em></p><p>可以看出，当 union() 在某些特定场景下，构造出的树的深度过大，会导致这种算法的查找性能并不好。</p><p><img src="/2021/12/20/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84%E7%AE%97%E6%B3%95%E4%B9%8B%E8%B7%AF02%E2%80%94%E2%80%94union-find%E7%AE%97%E6%B3%95/1-4.png" alt="quick-union 算法最坏的情况"></p><p>我们只需要稍加改进，就可以优化 quick-union 算法：额外使用一个数组，来记录树的大小，避免大树连接到小树根节点造成树的深度过深。</p><p><img src="/2021/12/20/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84%E7%AE%97%E6%B3%95%E4%B9%8B%E8%B7%AF02%E2%80%94%E2%80%94union-find%E7%AE%97%E6%B3%95/1-5.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UF</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span>[] id; <span class="hljs-comment">// 父连接数组（以触点作为索引）</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> count; <span class="hljs-comment">// 分量数量</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span>[] sz; <span class="hljs-comment">// 权重数组，记录根节点树的大小</span><br>    <br><br>    <span class="hljs-comment">// 以整数标示（0到N-1）初始化N个触点</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">UF</span><span class="hljs-params">(<span class="hljs-keyword">int</span> N)</span> </span>&#123;<br>        count = N;<br>        id = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[N];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; N; i++) &#123;<br>            id[i] = i;<br>            sz[i] = <span class="hljs-number">1</span>; <span class="hljs-comment">// 权重数组初始化，初始均为1</span><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 在p和q之间添加一条连接</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">union</span><span class="hljs-params">(<span class="hljs-keyword">int</span> p, <span class="hljs-keyword">int</span> q)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> pRoot = find(p);<br>        <span class="hljs-keyword">int</span> qRoot = find(q);<br>        <span class="hljs-keyword">if</span> (pRoot != qRoot) &#123;<br>            <span class="hljs-comment">// 判断权重大小，小树连接到大树根节点</span><br>            <span class="hljs-keyword">if</span> (sz[pRoot] &gt; sz[qRoot]) &#123;<br>                id[qRoot] = pRoot;<br>                sz[pRoot] += sz[qRoot]; <span class="hljs-comment">// 更新大树权重</span><br>            &#125;<br>            <span class="hljs-keyword">else</span> &#123;<br>                id[pRoot] = qRoot;<br>                sz[qRoot] += sz[pRoot]; <span class="hljs-comment">// 更新大树权重</span><br>            &#125;<br>            count--;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// p（0到N-1）所在分量的标识符</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-keyword">int</span> p)</span> </span>&#123;<br>        <span class="hljs-comment">// 当索引与值不相等时，往上追溯</span><br>        <span class="hljs-keyword">while</span> (p != id[p])<br>            p = id[p];<br>        <span class="hljs-comment">// 当索引与值相等时，表示已追溯到根，即分量</span><br>        <span class="hljs-keyword">return</span> p;<br>    &#125;<br><br>    <span class="hljs-comment">// 如果p和q存在于同一分量中则返回true</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">connected</span><span class="hljs-params">(<span class="hljs-keyword">int</span> p, <span class="hljs-keyword">int</span> q)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> find(p) == find(q);<br>    &#125;<br><br>    <span class="hljs-comment">// 连通分量的数量</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">count</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> count;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2021/12/20/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84%E7%AE%97%E6%B3%95%E4%B9%8B%E8%B7%AF02%E2%80%94%E2%80%94union-find%E7%AE%97%E6%B3%95/1-6.png" alt="对于N个触点，加权 quick-union 算法构造的森林中的任意节点深度最多为 lgN"></p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>算法</tag>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>从零开始的算法之路01——基本的数据结构</title>
    <link href="/2021/12/17/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84%E7%AE%97%E6%B3%95%E4%B9%8B%E8%B7%AF01%E2%80%94%E2%80%94%E5%9F%BA%E6%9C%AC%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <url>/2021/12/17/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84%E7%AE%97%E6%B3%95%E4%B9%8B%E8%B7%AF01%E2%80%94%E2%80%94%E5%9F%BA%E6%9C%AC%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
    
    <content type="html"><![CDATA[<h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><p>下压栈（或简称栈）是一种基于后进先出（LIFO）策略的集合类型。</p><p>学习栈可以先从一个经典的例子切入：<strong>算术表达式求值</strong>。</p><h3 id="算术表达式求值"><a href="#算术表达式求值" class="headerlink" title="算术表达式求值"></a>算术表达式求值</h3><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tap">(<span class="hljs-number"> 1 </span>+ ( (<span class="hljs-number"> 2 </span>+<span class="hljs-number"> 3 </span>) * (<span class="hljs-number"> 4 </span>*<span class="hljs-number"> 5 </span>) ) )<br></code></pre></td></tr></table></figure><p>上述表达式的结果为101，但用 java 语言如何实现这个运算呢？答案之一就是：<strong>Dijkstra的双栈算术表达式求值算法</strong>。基本思路如下：</p><ul><li>创建2个栈（一个保存运算符，一个保存操作数）</li><li>将操作数压入操作数栈</li><li>将运算符压入运算符栈</li><li>忽略左括号</li><li>遇到右括号时，弹出一个运算符，弹出所需数量的操作数，并将运算符和操作数的运算结果压入操作数栈</li></ul><p>实现代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">// 运算符栈</span><br>        Stack&lt;String&gt; ops = <span class="hljs-keyword">new</span> Stack&lt;&gt;();<br>        <span class="hljs-comment">// 操作数栈</span><br>        Stack&lt;Double&gt; vals = <span class="hljs-keyword">new</span> Stack&lt;&gt;();<br><br>        Scanner sc = <span class="hljs-keyword">new</span> Scanner(System.in);<br>        <span class="hljs-keyword">while</span> (sc.hasNext()) &#123;<br>            String s = sc.next();<br>            <span class="hljs-keyword">if</span> (s.equals(<span class="hljs-string">&quot;(&quot;</span>)) ; <span class="hljs-comment">// 忽略左括号</span><br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (s.equals(<span class="hljs-string">&quot;+&quot;</span>)) ops.add(s); <span class="hljs-comment">// 运算符入栈</span><br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (s.equals(<span class="hljs-string">&quot;-&quot;</span>)) ops.add(s); <span class="hljs-comment">// 运算符入栈</span><br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (s.equals(<span class="hljs-string">&quot;*&quot;</span>)) ops.add(s); <span class="hljs-comment">// 运算符入栈</span><br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (s.equals(<span class="hljs-string">&quot;/&quot;</span>)) ops.add(s); <span class="hljs-comment">// 运算符入栈</span><br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (s.equals(<span class="hljs-string">&quot;sqrt&quot;</span>)) ops.add(s); <span class="hljs-comment">// 运算符入栈</span><br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (s.equals(<span class="hljs-string">&quot;)&quot;</span>)) &#123; <span class="hljs-comment">//遇到右括号，弹栈运算</span><br>                String op = ops.pop();<br>                Double val = vals.pop();<br>                <span class="hljs-keyword">if</span> (op.equals(<span class="hljs-string">&quot;+&quot;</span>)) val = vals.pop() + val;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (op.equals(<span class="hljs-string">&quot;-&quot;</span>)) val = vals.pop() - val;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (op.equals(<span class="hljs-string">&quot;*&quot;</span>)) val = vals.pop() * val;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (op.equals(<span class="hljs-string">&quot;/&quot;</span>)) val = vals.pop()/ val;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (op.equals(<span class="hljs-string">&quot;sqrt&quot;</span>)) val = Math.sqrt(val);<br>                vals.push(val);<br>            &#125; <span class="hljs-keyword">else</span> vals.push(Double.parseDouble(s)); <span class="hljs-comment">// 操作数入栈</span><br>        &#125;<br>        <br>        <span class="hljs-comment">// 打印最终结果</span><br>        System.out.println(vals.pop());<br>    &#125;<br></code></pre></td></tr></table></figure><p>了解了栈的一种使用场景后，我们可以尝试自己来实现一个 stack ，其基本的 API 如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Stack</span>&lt;<span class="hljs-title">Item</span>&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title">Iterable</span>&lt;<span class="hljs-title">Item</span>&gt; </span>&#123;<br>    <span class="hljs-comment">// 创建一个空栈</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Stack</span><span class="hljs-params">()</span> </span>&#123;&#125;<br>    <br>    <span class="hljs-comment">// 添加一个元素</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">push</span><span class="hljs-params">(Item item)</span> </span>&#123;&#125;<br>    <br>    <span class="hljs-comment">// 删除最近添加的元素</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Item <span class="hljs-title">pop</span><span class="hljs-params">()</span> </span>&#123;&#125;<br>    <br>    <span class="hljs-comment">// 栈是否为空</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isEmpty</span><span class="hljs-params">()</span> </span>&#123;&#125;<br>    <br>    <span class="hljs-comment">// 栈中元素数量</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">size</span><span class="hljs-params">()</span> </span>&#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="用数组实现动态变容栈"><a href="#用数组实现动态变容栈" class="headerlink" title="用数组实现动态变容栈"></a>用数组实现动态变容栈</h3><p>首先我们可以用 java 中最常见的数据类型来做实现——数组。</p><p>由于 java 中数组是定长的，所以还需要考虑数组扩容、缩容，我们可以采用新建一个不同长度数组并把数据引用指向旧数组对应位置的方式进行 resize。</p><p>此外这里还实现了 Iterable 接口，是因为能够使用 for each 语句进行迭代遍历是集合数据类型的基本操作之一。自己写的 stack 不实现这个细节也是 ok 的，这里就不展开谈了。</p><p>实现代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Iterator;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Stack</span>&lt;<span class="hljs-title">Item</span>&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title">Iterable</span>&lt;<span class="hljs-title">Item</span>&gt; </span>&#123;<br>    <span class="hljs-keyword">public</span> Item[] items; <span class="hljs-comment">// 数组</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> N; <span class="hljs-comment">// size</span><br><br>    <span class="hljs-comment">// 创建一个空栈</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Stack</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">new</span> Stack(<span class="hljs-number">16</span>); <span class="hljs-comment">// 默认给16的容量</span><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Stack</span><span class="hljs-params">(<span class="hljs-keyword">int</span> cap)</span> </span>&#123;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 允许用户自行定义初始数组大小</span><br><span class="hljs-comment">         * 另java是无法创建泛型数组的，只能用object和类型转换代替</span><br><span class="hljs-comment">         */</span><br>        items = (Item[]) <span class="hljs-keyword">new</span> Object[cap];<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 将items数据移动到另一个大小不同的数组中</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> max 新数组长度</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">resize</span><span class="hljs-params">(<span class="hljs-keyword">int</span> max)</span> </span>&#123;<br>        Item[] temp = (Item[]) <span class="hljs-keyword">new</span> Object[max];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt;N; i++)<br>            temp[i] = items[i];<br>        items = temp;<br>    &#125;<br><br>    <span class="hljs-comment">// 添加一个元素</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">push</span><span class="hljs-params">(Item item)</span> </span>&#123;<br>        <span class="hljs-comment">// 如果元素数量达到数组上限，双倍扩容</span><br>        <span class="hljs-keyword">if</span> (N == items.length)<br>            resize(<span class="hljs-number">2</span> * items.length);<br>        items[N++] = item;<br>    &#125;<br><br>    <span class="hljs-comment">// 删除最近添加的元素</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Item <span class="hljs-title">pop</span><span class="hljs-params">()</span> </span>&#123;<br>        Item item = items[--N];<br>        items[N] = <span class="hljs-keyword">null</span>; <span class="hljs-comment">// 释放数组中该位置的引用，方便jvm回收</span><br>        <span class="hljs-comment">// 如果元素数量只有数组的1/4，缩容</span><br>        <span class="hljs-keyword">if</span> (N &gt; <span class="hljs-number">0</span> &amp;&amp; N == items.length / <span class="hljs-number">4</span>)<br>            resize(items.length / <span class="hljs-number">2</span>);<br>        <span class="hljs-keyword">return</span> item;<br>    &#125;<br><br>    <span class="hljs-comment">// 栈是否为空</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isEmpty</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> N == <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 栈中元素数量</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">size</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> N;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Iterator&lt;Item&gt; <span class="hljs-title">iterator</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> StackIterator();<br>    &#125;<br>    <br>    <span class="hljs-comment">// 迭代具体实现</span><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StackIterator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Iterator</span>&lt;<span class="hljs-title">Item</span>&gt; </span>&#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br>        <br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">hasNext</span><span class="hljs-params">()</span> </span>&#123;<br>            <span class="hljs-keyword">return</span> i &lt; N;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> Item <span class="hljs-title">next</span><span class="hljs-params">()</span> </span>&#123;<br>            <span class="hljs-keyword">return</span> items[i++];<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h3><p>可以看到使用数组来表示集合类的抽象数据类型并不那么合适，频繁的扩容缩容都是对资源、性能的一种浪费。那有没有哪种数据结构可以作为更优解呢？答案是：<strong>链表</strong>。</p><p><strong>链表是一种递归的数据结构，它或者为空（null），或者是指向一个结点（node）的引用，该结点含有一个泛型的元素和一个指向另一条链表的引用。</strong></p><p>下面是一个单向链表的结点实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Node</span> </span>&#123;<br>    Item item; <span class="hljs-comment">// 泛型元素</span><br>    Node next; <span class="hljs-comment">// 指向另一条链表的引用</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="用链表实现栈"><a href="#用链表实现栈" class="headerlink" title="用链表实现栈"></a>用链表实现栈</h3><p>学会如何构造链表的结点以后，就可以拿来实现栈了。</p><p>当然我们还需要知道如何在链表中做到插入、删除数据，如何遍历链表。</p><p>这里需要注意的是单向链表可以方便地实现头部插入和尾部插入这两种形式，但是删除比较方便的实现就只有一种：头部删除。考虑到栈的后进先出（LIFO）特点，这里采用头插和头删。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Iterator;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Stack</span>&lt;<span class="hljs-title">Item</span>&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title">Iterable</span>&lt;<span class="hljs-title">Item</span>&gt; </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Node</span> </span>&#123;<br>        Item item; <span class="hljs-comment">// 泛型元素</span><br>        Node next; <span class="hljs-comment">// 指向另一条链表的引用</span><br><br>        Node() &#123;&#125;<br><br>        Node(Item item) &#123;<br>            <span class="hljs-keyword">this</span>.item = item;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> Node first; <span class="hljs-comment">// 链表(头节点)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> N; <span class="hljs-comment">// size</span><br><br>    <span class="hljs-comment">// 创建一个空栈</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Stack</span><span class="hljs-params">()</span> </span>&#123;&#125;<br><br>    <span class="hljs-comment">// 添加一个元素</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">push</span><span class="hljs-params">(Item item)</span> </span>&#123;<br>        Node node = <span class="hljs-keyword">new</span> Node(item); <span class="hljs-comment">// 新建一个结点</span><br>        node.next = first; <span class="hljs-comment">// 该结点插在头部，即next指向先前的头结点</span><br>        first = node; <span class="hljs-comment">// 将first引用指向新的头节点</span><br>        N++;<br>    &#125;<br><br>    <span class="hljs-comment">// 删除最近添加的元素</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Item <span class="hljs-title">pop</span><span class="hljs-params">()</span> </span>&#123;<br>        Item item = first.item; <span class="hljs-comment">// 取出头节点的元素</span><br>        first = first.next; <span class="hljs-comment">// 将first引用指向后面一个结点，即删除头节点</span><br>        N--;<br>        <span class="hljs-keyword">return</span> item;<br>    &#125;<br><br>    <span class="hljs-comment">// 栈是否为空</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isEmpty</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> N == <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 栈中元素数量</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">size</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> N;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Iterator&lt;Item&gt; <span class="hljs-title">iterator</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> StackIterator();<br>    &#125;<br><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StackIterator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Iterator</span>&lt;<span class="hljs-title">Item</span>&gt; </span>&#123;<br>        Node current = first;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">hasNext</span><span class="hljs-params">()</span> </span>&#123;<br>            <span class="hljs-keyword">return</span> current != <span class="hljs-keyword">null</span>;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> Item <span class="hljs-title">next</span><span class="hljs-params">()</span> </span>&#123;<br>            Item item = current.item;<br>            current = current.next;<br>            <span class="hljs-keyword">return</span> item;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><p>队列与栈很相似，要说不同点在于它是一种先进先出（FIFO）的集合类型。它的 API 如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Queue</span>&lt;<span class="hljs-title">Item</span>&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title">Iterable</span>&lt;<span class="hljs-title">Item</span>&gt; </span>&#123;<br>    <span class="hljs-comment">// 创建空队列</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Queue</span><span class="hljs-params">()</span> </span>&#123;&#125;<br>    <br>    <span class="hljs-comment">// 添加一个元素</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">enqueue</span><span class="hljs-params">(Item item)</span> </span>&#123;&#125;<br>    <br>    <span class="hljs-comment">// 删除最早添加的元素</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Item <span class="hljs-title">dequeue</span><span class="hljs-params">()</span> </span>&#123;&#125;<br>    <br>    <span class="hljs-comment">// 队列是否为空</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isEmpty</span><span class="hljs-params">()</span> </span>&#123;&#125;<br>    <br>    <span class="hljs-comment">// 队列中的元素数量</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">size</span><span class="hljs-params">()</span> </span>&#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>用链表实现队列也很简单，这里使用尾插和头删，与栈相比只需要多管理一个尾结点：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Iterator;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Queue</span>&lt;<span class="hljs-title">Item</span>&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title">Iterable</span>&lt;<span class="hljs-title">Item</span>&gt; </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Node</span> </span>&#123;<br>        Item item; <span class="hljs-comment">// 泛型元素</span><br>        Node next; <span class="hljs-comment">// 指向另一条链表的引用</span><br><br>        Node() &#123;&#125;<br><br>        Node(Item item) &#123;<br>            <span class="hljs-keyword">this</span>.item = item;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> Node first; <span class="hljs-comment">// 链表（头节点）</span><br>    <span class="hljs-keyword">private</span> Node last; <span class="hljs-comment">// 尾结点</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> N; <span class="hljs-comment">// size</span><br><br>    <span class="hljs-comment">// 创建空队列</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Queue</span><span class="hljs-params">()</span> </span>&#123;&#125;<br><br>    <span class="hljs-comment">// 添加一个元素</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">enqueue</span><span class="hljs-params">(Item item)</span> </span>&#123;<br>        Node node = <span class="hljs-keyword">new</span> Node(item); <span class="hljs-comment">// 新建一个结点</span><br>        <span class="hljs-keyword">if</span> (isEmpty())<br>            first = node; <span class="hljs-comment">// 若链表为空，则头节点指向该结点</span><br>        <span class="hljs-keyword">else</span><br>            last.next = node; <span class="hljs-comment">// 若链表不为空，则尾结点的下个结点指向它</span><br>        last = node; <span class="hljs-comment">// 更新last引用，指向新的尾结点</span><br>        N++;<br>    &#125;<br><br>    <span class="hljs-comment">// 删除最早添加的元素</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Item <span class="hljs-title">dequeue</span><span class="hljs-params">()</span> </span>&#123;<br>        Item item = first.item;<br>        first = first.next;<br>        <span class="hljs-keyword">if</span> (--N == <span class="hljs-number">0</span>)<br>            last = <span class="hljs-keyword">null</span>; <span class="hljs-comment">// 若删除后链表为空，则将尾结点指向null</span><br>        <span class="hljs-keyword">return</span> item;<br>    &#125;<br><br>    <span class="hljs-comment">// 队列是否为空</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isEmpty</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> N == <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 队列中的元素数量</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">size</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> N;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Iterator&lt;Item&gt; <span class="hljs-title">iterator</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> QueueIterator();<br>    &#125;<br><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">QueueIterator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Iterator</span>&lt;<span class="hljs-title">Item</span>&gt; </span>&#123;<br>        <span class="hljs-keyword">private</span> Node current = first;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">hasNext</span><span class="hljs-params">()</span> </span>&#123;<br>            <span class="hljs-keyword">return</span> current != <span class="hljs-keyword">null</span>;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> Item <span class="hljs-title">next</span><span class="hljs-params">()</span> </span>&#123;<br>            Item item = current.item;<br>            current = current.next;<br>            <span class="hljs-keyword">return</span> item;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="背包"><a href="#背包" class="headerlink" title="背包"></a>背包</h2><p>背包是一种不支持从中删除元素的集合数据类型。与队列和栈不同，它不在意元素的处理顺序。</p><p>要理解背包的概念，可以想象一个非常喜欢收集弹子球的人，一次一个，并且会不时在所有的弹子球中寻找某一颗拥有某种特点的弹子球。</p><p>一个简单的背包 API 如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Bag</span>&lt;<span class="hljs-title">Item</span>&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title">Iterable</span>&lt;<span class="hljs-title">Item</span>&gt; </span>&#123;<br>    <span class="hljs-comment">// 创建一个空背包</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Bag</span><span class="hljs-params">()</span> </span>&#123;&#125;<br><br>    <span class="hljs-comment">// 添加一个元素</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(Item item)</span> </span>&#123;&#125;<br><br>    <span class="hljs-comment">// 背包是否为空</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isEmpty</span><span class="hljs-params">()</span> </span>&#123;&#125;<br>    <br>    <span class="hljs-comment">// 背包中元素数量</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">size</span><span class="hljs-params">()</span> </span>&#123;&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>这里也用链表实现一下，这里也和栈一样采用头插：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Bag</span>&lt;<span class="hljs-title">Item</span>&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title">Iterable</span>&lt;<span class="hljs-title">Item</span>&gt; </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Node</span> </span>&#123;<br>        Item item; <span class="hljs-comment">// 泛型元素</span><br>        Node next; <span class="hljs-comment">// 指向另一条链表的引用</span><br><br>        Node() &#123;&#125;<br><br>        Node(Item item) &#123;<br>            <span class="hljs-keyword">this</span>.item = item;<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-keyword">private</span> Node first;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> N;<br><br>    <span class="hljs-comment">// 创建一个空背包</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Bag</span><span class="hljs-params">()</span> </span>&#123;&#125;<br><br>    <span class="hljs-comment">// 添加一个元素</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(Item item)</span> </span>&#123;<br>        Node node = <span class="hljs-keyword">new</span> Node(item);<br>        node.next = first;<br>        first = node;<br>        N++;<br>    &#125;<br><br>    <span class="hljs-comment">// 背包是否为空</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isEmpty</span><span class="hljs-params">()</span> </span>&#123;<br>       <span class="hljs-keyword">return</span> N == <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 背包中元素数量</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">size</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> N;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Iterator&lt;Item&gt; <span class="hljs-title">iterator</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br>    <br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BagIterator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Iterator</span>&lt;<span class="hljs-title">Item</span>&gt; </span>&#123;<br>        <span class="hljs-keyword">private</span> Node cur =  first;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">hasNext</span><span class="hljs-params">()</span> </span>&#123;<br>            <span class="hljs-keyword">return</span> cur != <span class="hljs-keyword">null</span>;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> Item <span class="hljs-title">next</span><span class="hljs-params">()</span> </span>&#123;<br>            Item item = cur.item;<br>            cur = cur.next;<br>            <span class="hljs-keyword">return</span> item;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>算法</tag>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
